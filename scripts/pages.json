[{"name":"abstract fun now(): T","description":"pw.forst.katlib.TimeProvider.now","location":"katlib/pw.forst.katlib/-time-provider/now.html","searchKeys":["now","abstract fun now(): T","pw.forst.katlib.TimeProvider.now"]},{"name":"fun <A : Any, B : Any> Pair<A?, B?>.propagateNull(): Pair<A, B>?","description":"pw.forst.katlib.propagateNull","location":"katlib/pw.forst.katlib/propagate-null.html","searchKeys":["propagateNull","fun <A : Any, B : Any> Pair<A?, B?>.propagateNull(): Pair<A, B>?","pw.forst.katlib.propagateNull"]},{"name":"fun <A, B, C> Iterable<Triple<A, B, C>>.flattenToLists(): Triple<List<A>, List<B>, List<C>>","description":"pw.forst.katlib.flattenToLists","location":"katlib/pw.forst.katlib/flatten-to-lists.html","searchKeys":["flattenToLists","fun <A, B, C> Iterable<Triple<A, B, C>>.flattenToLists(): Triple<List<A>, List<B>, List<C>>","pw.forst.katlib.flattenToLists"]},{"name":"fun <E> Iterable<E>.getRandomElement(rand: Random): E","description":"pw.forst.katlib.getRandomElement","location":"katlib/pw.forst.katlib/get-random-element.html","searchKeys":["getRandomElement","fun <E> Iterable<E>.getRandomElement(rand: Random): E","pw.forst.katlib.getRandomElement"]},{"name":"fun <E> Iterable<E>.random(random: Random = Random): E","description":"pw.forst.katlib.random","location":"katlib/pw.forst.katlib/random.html","searchKeys":["random","fun <E> Iterable<E>.random(random: Random = Random): E","pw.forst.katlib.random"]},{"name":"fun <E> SortedSet<E>.max(): E?","description":"pw.forst.katlib.max","location":"katlib/pw.forst.katlib/max.html","searchKeys":["max","fun <E> SortedSet<E>.max(): E?","pw.forst.katlib.max"]},{"name":"fun <E> SortedSet<E>.min(): E?","description":"pw.forst.katlib.min","location":"katlib/pw.forst.katlib/min.html","searchKeys":["min","fun <E> SortedSet<E>.min(): E?","pw.forst.katlib.min"]},{"name":"fun <K, V : Any> Iterable<Map<K, List<V>>>.flatMerge(): Map<K, List<V>>","description":"pw.forst.katlib.flatMerge","location":"katlib/pw.forst.katlib/flat-merge.html","searchKeys":["flatMerge","fun <K, V : Any> Iterable<Map<K, List<V>>>.flatMerge(): Map<K, List<V>>","pw.forst.katlib.flatMerge"]},{"name":"fun <K, V : Any> Iterable<Map<K, V>>.merge(): Map<K, List<V>>","description":"pw.forst.katlib.merge","location":"katlib/pw.forst.katlib/merge.html","searchKeys":["merge","fun <K, V : Any> Iterable<Map<K, V>>.merge(): Map<K, List<V>>","pw.forst.katlib.merge"]},{"name":"fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.assocTo(destination: M): M","description":"pw.forst.katlib.assocTo","location":"katlib/pw.forst.katlib/assoc-to.html","searchKeys":["assocTo","fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.assocTo(destination: M): M","pw.forst.katlib.assocTo"]},{"name":"fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.assocTo(destination: M): M","description":"pw.forst.katlib.assocTo","location":"katlib/pw.forst.katlib/assoc-to.html","searchKeys":["assocTo","fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.assocTo(destination: M): M","pw.forst.katlib.assocTo"]},{"name":"fun <K, V> Iterable<Pair<K, V>>.assoc(): Map<K, V>","description":"pw.forst.katlib.assoc","location":"katlib/pw.forst.katlib/assoc.html","searchKeys":["assoc","fun <K, V> Iterable<Pair<K, V>>.assoc(): Map<K, V>","pw.forst.katlib.assoc"]},{"name":"fun <K, V> Sequence<Pair<K, V>>.assoc(): Map<K, V>","description":"pw.forst.katlib.assoc","location":"katlib/pw.forst.katlib/assoc.html","searchKeys":["assoc","fun <K, V> Sequence<Pair<K, V>>.assoc(): Map<K, V>","pw.forst.katlib.assoc"]},{"name":"fun <K1, K2, K3, V, M : MutableCollection<V>> Map<K1, Map<K2, Map<K3, V>>>.getThirdLevelValuesTo(destination: M): M","description":"pw.forst.katlib.getThirdLevelValuesTo","location":"katlib/pw.forst.katlib/get-third-level-values-to.html","searchKeys":["getThirdLevelValuesTo","fun <K1, K2, K3, V, M : MutableCollection<V>> Map<K1, Map<K2, Map<K3, V>>>.getThirdLevelValuesTo(destination: M): M","pw.forst.katlib.getThirdLevelValuesTo"]},{"name":"fun <K1, K2, K3, V> Map<K1, Map<K2, Map<K3, V>>>.getThirdLevelValues(): Set<V>","description":"pw.forst.katlib.getThirdLevelValues","location":"katlib/pw.forst.katlib/get-third-level-values.html","searchKeys":["getThirdLevelValues","fun <K1, K2, K3, V> Map<K1, Map<K2, Map<K3, V>>>.getThirdLevelValues(): Set<V>","pw.forst.katlib.getThirdLevelValues"]},{"name":"fun <K1, K2, K3, V> Map<Triple<K1, K2, K3>, V>.toThreeLevelMap(): Map<K1, Map<K2, Map<K3, V>>>","description":"pw.forst.katlib.toThreeLevelMap","location":"katlib/pw.forst.katlib/to-three-level-map.html","searchKeys":["toThreeLevelMap","fun <K1, K2, K3, V> Map<Triple<K1, K2, K3>, V>.toThreeLevelMap(): Map<K1, Map<K2, Map<K3, V>>>","pw.forst.katlib.toThreeLevelMap"]},{"name":"fun <K1, K2, V, M : MutableCollection<V>> Map<K1, Map<K2, V>>.getSecondLevelValuesTo(destination: M): M","description":"pw.forst.katlib.getSecondLevelValuesTo","location":"katlib/pw.forst.katlib/get-second-level-values-to.html","searchKeys":["getSecondLevelValuesTo","fun <K1, K2, V, M : MutableCollection<V>> Map<K1, Map<K2, V>>.getSecondLevelValuesTo(destination: M): M","pw.forst.katlib.getSecondLevelValuesTo"]},{"name":"fun <K1, K2, V> List<Pair<Pair<K1, K2>, V>>.toTwoLevelMap(): Map<K1, Map<K2, V>>","description":"pw.forst.katlib.toTwoLevelMap","location":"katlib/pw.forst.katlib/to-two-level-map.html","searchKeys":["toTwoLevelMap","fun <K1, K2, V> List<Pair<Pair<K1, K2>, V>>.toTwoLevelMap(): Map<K1, Map<K2, V>>","pw.forst.katlib.toTwoLevelMap"]},{"name":"fun <K1, K2, V> Map<K1, Map<K2, V>>.getSecondLevelValues(): Set<V>","description":"pw.forst.katlib.getSecondLevelValues","location":"katlib/pw.forst.katlib/get-second-level-values.html","searchKeys":["getSecondLevelValues","fun <K1, K2, V> Map<K1, Map<K2, V>>.getSecondLevelValues(): Set<V>","pw.forst.katlib.getSecondLevelValues"]},{"name":"fun <K1, K2, V> Map<K1, Map<K2, V>>.swapKeys(): Map<K2, Map<K1, V>>","description":"pw.forst.katlib.swapKeys","location":"katlib/pw.forst.katlib/swap-keys.html","searchKeys":["swapKeys","fun <K1, K2, V> Map<K1, Map<K2, V>>.swapKeys(): Map<K2, Map<K1, V>>","pw.forst.katlib.swapKeys"]},{"name":"fun <K1, K2, V> Map<Pair<K1, K2>, V>.toTwoLevelMap(): Map<K1, Map<K2, V>>","description":"pw.forst.katlib.toTwoLevelMap","location":"katlib/pw.forst.katlib/to-two-level-map.html","searchKeys":["toTwoLevelMap","fun <K1, K2, V> Map<Pair<K1, K2>, V>.toTwoLevelMap(): Map<K1, Map<K2, V>>","pw.forst.katlib.toTwoLevelMap"]},{"name":"fun <R> prompt(promptText: String, exceptionHandler: (Exception) -> String? = { null }, transform: (input: String) -> R): R","description":"pw.forst.katlib.prompt","location":"katlib/pw.forst.katlib/prompt.html","searchKeys":["prompt","fun <R> prompt(promptText: String, exceptionHandler: (Exception) -> String? = { null }, transform: (input: String) -> R): R","pw.forst.katlib.prompt"]},{"name":"fun <T : Any> T.asList(): List<T>","description":"pw.forst.katlib.asList","location":"katlib/pw.forst.katlib/as-list.html","searchKeys":["asList","fun <T : Any> T.asList(): List<T>","pw.forst.katlib.asList"]},{"name":"fun <T : Any> createJson(value: T): String","description":"pw.forst.katlib.createJson","location":"katlib/pw.forst.katlib/create-json.html","searchKeys":["createJson","fun <T : Any> createJson(value: T): String","pw.forst.katlib.createJson"]},{"name":"fun <T : Any> createJsonBytes(value: T): ByteArray","description":"pw.forst.katlib.createJsonBytes","location":"katlib/pw.forst.katlib/create-json-bytes.html","searchKeys":["createJsonBytes","fun <T : Any> createJsonBytes(value: T): ByteArray","pw.forst.katlib.createJsonBytes"]},{"name":"fun <T : Any> createPrettyJson(value: T): String","description":"pw.forst.katlib.createPrettyJson","location":"katlib/pw.forst.katlib/create-pretty-json.html","searchKeys":["createPrettyJson","fun <T : Any> createPrettyJson(value: T): String","pw.forst.katlib.createPrettyJson"]},{"name":"fun <T : Comparable<T>> ClosedRange<T>.intersects(other: ClosedRange<T>): Boolean","description":"pw.forst.katlib.intersects","location":"katlib/pw.forst.katlib/intersects.html","searchKeys":["intersects","fun <T : Comparable<T>> ClosedRange<T>.intersects(other: ClosedRange<T>): Boolean","pw.forst.katlib.intersects"]},{"name":"fun <T, V> Iterable<Pair<T, V>>.splitPairCollection(): Pair<List<T>, List<V>>","description":"pw.forst.katlib.splitPairCollection","location":"katlib/pw.forst.katlib/split-pair-collection.html","searchKeys":["splitPairCollection","fun <T, V> Iterable<Pair<T, V>>.splitPairCollection(): Pair<List<T>, List<V>>","pw.forst.katlib.splitPairCollection"]},{"name":"fun <T1, T2> Iterable<T1>.cartesianProduct(other: Iterable<T2>): Set<Pair<T1, T2>>","description":"pw.forst.katlib.cartesianProduct","location":"katlib/pw.forst.katlib/cartesian-product.html","searchKeys":["cartesianProduct","fun <T1, T2> Iterable<T1>.cartesianProduct(other: Iterable<T2>): Set<Pair<T1, T2>>","pw.forst.katlib.cartesianProduct"]},{"name":"fun <T> Iterable<Iterable<T>>.cartesianProduct(): List<List<T>>","description":"pw.forst.katlib.cartesianProduct","location":"katlib/pw.forst.katlib/cartesian-product.html","searchKeys":["cartesianProduct","fun <T> Iterable<Iterable<T>>.cartesianProduct(): List<List<T>>","pw.forst.katlib.cartesianProduct"]},{"name":"fun <T> Iterable<Iterable<T>>.lazyCartesianProduct(): Sequence<List<T>>","description":"pw.forst.katlib.lazyCartesianProduct","location":"katlib/pw.forst.katlib/lazy-cartesian-product.html","searchKeys":["lazyCartesianProduct","fun <T> Iterable<Iterable<T>>.lazyCartesianProduct(): Sequence<List<T>>","pw.forst.katlib.lazyCartesianProduct"]},{"name":"fun <T> Iterable<Iterable<T>?>.intersect(): Set<T>","description":"pw.forst.katlib.intersect","location":"katlib/pw.forst.katlib/intersect.html","searchKeys":["intersect","fun <T> Iterable<Iterable<T>?>.intersect(): Set<T>","pw.forst.katlib.intersect"]},{"name":"fun <T> Iterable<Iterable<T>?>.union(): Set<T>","description":"pw.forst.katlib.union","location":"katlib/pw.forst.katlib/union.html","searchKeys":["union","fun <T> Iterable<Iterable<T>?>.union(): Set<T>","pw.forst.katlib.union"]},{"name":"fun <T> Iterable<T>.isEmpty(): Boolean","description":"pw.forst.katlib.isEmpty","location":"katlib/pw.forst.katlib/is-empty.html","searchKeys":["isEmpty","fun <T> Iterable<T>.isEmpty(): Boolean","pw.forst.katlib.isEmpty"]},{"name":"fun <T> Iterable<T>.singleOrEmpty(): T?","description":"pw.forst.katlib.singleOrEmpty","location":"katlib/pw.forst.katlib/single-or-empty.html","searchKeys":["singleOrEmpty","fun <T> Iterable<T>.singleOrEmpty(): T?","pw.forst.katlib.singleOrEmpty"]},{"name":"fun <T> Iterable<T>.toNavigableSet(comparator: Comparator<in T>): NavigableSet<T>","description":"pw.forst.katlib.toNavigableSet","location":"katlib/pw.forst.katlib/to-navigable-set.html","searchKeys":["toNavigableSet","fun <T> Iterable<T>.toNavigableSet(comparator: Comparator<in T>): NavigableSet<T>","pw.forst.katlib.toNavigableSet"]},{"name":"fun <T> Map<T, Double>.getKeysInWeightedRandomOrder(normalizer: Double, rand: Random): List<T>","description":"pw.forst.katlib.getKeysInWeightedRandomOrder","location":"katlib/pw.forst.katlib/get-keys-in-weighted-random-order.html","searchKeys":["getKeysInWeightedRandomOrder","fun <T> Map<T, Double>.getKeysInWeightedRandomOrder(normalizer: Double, rand: Random): List<T>","pw.forst.katlib.getKeysInWeightedRandomOrder"]},{"name":"fun <T> Map<T, Double>.getWeightedRandom(rand: Random): T","description":"pw.forst.katlib.getWeightedRandom","location":"katlib/pw.forst.katlib/get-weighted-random.html","searchKeys":["getWeightedRandom","fun <T> Map<T, Double>.getWeightedRandom(rand: Random): T","pw.forst.katlib.getWeightedRandom"]},{"name":"fun <T> Optional<T>.orNull(): T?","description":"pw.forst.katlib.orNull","location":"katlib/pw.forst.katlib/or-null.html","searchKeys":["orNull","fun <T> Optional<T>.orNull(): T?","pw.forst.katlib.orNull"]},{"name":"fun Any.toLongString(description: String, brackets: String = \"()\", className: String? = null): String","description":"pw.forst.katlib.toLongString","location":"katlib/pw.forst.katlib/to-long-string.html","searchKeys":["toLongString","fun Any.toLongString(description: String, brackets: String = \"()\", className: String? = null): String","pw.forst.katlib.toLongString"]},{"name":"fun Any?.toShortString(): String","description":"pw.forst.katlib.toShortString","location":"katlib/pw.forst.katlib/to-short-string.html","searchKeys":["toShortString","fun Any?.toShortString(): String","pw.forst.katlib.toShortString"]},{"name":"fun ByteArray.md5(): String","description":"pw.forst.katlib.md5","location":"katlib/pw.forst.katlib/md5.html","searchKeys":["md5","fun ByteArray.md5(): String","pw.forst.katlib.md5"]},{"name":"fun ByteArray.sha256(): String","description":"pw.forst.katlib.sha256","location":"katlib/pw.forst.katlib/sha256.html","searchKeys":["sha256","fun ByteArray.sha256(): String","pw.forst.katlib.sha256"]},{"name":"fun ByteArray.toBase64(): String","description":"pw.forst.katlib.toBase64","location":"katlib/pw.forst.katlib/to-base64.html","searchKeys":["toBase64","fun ByteArray.toBase64(): String","pw.forst.katlib.toBase64"]},{"name":"fun ByteArray.toUuid(): UUID","description":"pw.forst.katlib.toUuid","location":"katlib/pw.forst.katlib/to-uuid.html","searchKeys":["toUuid","fun ByteArray.toUuid(): UUID","pw.forst.katlib.toUuid"]},{"name":"fun ByteArray.toUuidFlipped(): UUID","description":"pw.forst.katlib.toUuidFlipped","location":"katlib/pw.forst.katlib/to-uuid-flipped.html","searchKeys":["toUuidFlipped","fun ByteArray.toUuidFlipped(): UUID","pw.forst.katlib.toUuidFlipped"]},{"name":"fun Date.toLocalDate(zoneId: ZoneId): LocalDate","description":"pw.forst.katlib.toLocalDate","location":"katlib/pw.forst.katlib/to-local-date.html","searchKeys":["toLocalDate","fun Date.toLocalDate(zoneId: ZoneId): LocalDate","pw.forst.katlib.toLocalDate"]},{"name":"fun Date.toUtcLocalDate(): LocalDate","description":"pw.forst.katlib.toUtcLocalDate","location":"katlib/pw.forst.katlib/to-utc-local-date.html","searchKeys":["toUtcLocalDate","fun Date.toUtcLocalDate(): LocalDate","pw.forst.katlib.toUtcLocalDate"]},{"name":"fun Instant.durationToInMilli(other: Instant): Long","description":"pw.forst.katlib.durationToInMilli","location":"katlib/pw.forst.katlib/duration-to-in-milli.html","searchKeys":["durationToInMilli","fun Instant.durationToInMilli(other: Instant): Long","pw.forst.katlib.durationToInMilli"]},{"name":"fun Iterable<List<Double>>.sumDoublesByIndexes(): List<Double>","description":"pw.forst.katlib.sumDoublesByIndexes","location":"katlib/pw.forst.katlib/sum-doubles-by-indexes.html","searchKeys":["sumDoublesByIndexes","fun Iterable<List<Double>>.sumDoublesByIndexes(): List<Double>","pw.forst.katlib.sumDoublesByIndexes"]},{"name":"fun Iterable<List<Int>>.sumByIndexes(): List<Int>","description":"pw.forst.katlib.sumByIndexes","location":"katlib/pw.forst.katlib/sum-by-indexes.html","searchKeys":["sumByIndexes","fun Iterable<List<Int>>.sumByIndexes(): List<Int>","pw.forst.katlib.sumByIndexes"]},{"name":"fun LocalDate.getDateRangeTo(to: LocalDate): List<LocalDate>","description":"pw.forst.katlib.getDateRangeTo","location":"katlib/pw.forst.katlib/get-date-range-to.html","searchKeys":["getDateRangeTo","fun LocalDate.getDateRangeTo(to: LocalDate): List<LocalDate>","pw.forst.katlib.getDateRangeTo"]},{"name":"fun LocalDate.getDateRangeToAsStream(to: LocalDate): Stream<LocalDate>","description":"pw.forst.katlib.getDateRangeToAsStream","location":"katlib/pw.forst.katlib/get-date-range-to-as-stream.html","searchKeys":["getDateRangeToAsStream","fun LocalDate.getDateRangeToAsStream(to: LocalDate): Stream<LocalDate>","pw.forst.katlib.getDateRangeToAsStream"]},{"name":"fun LocalDate.getDayDifference(to: LocalDate): Int","description":"pw.forst.katlib.getDayDifference","location":"katlib/pw.forst.katlib/get-day-difference.html","searchKeys":["getDayDifference","fun LocalDate.getDayDifference(to: LocalDate): Int","pw.forst.katlib.getDayDifference"]},{"name":"fun LocalDate.getDaysInInterval(to: LocalDate): Int","description":"pw.forst.katlib.getDaysInInterval","location":"katlib/pw.forst.katlib/get-days-in-interval.html","searchKeys":["getDaysInInterval","fun LocalDate.getDaysInInterval(to: LocalDate): Int","pw.forst.katlib.getDaysInInterval"]},{"name":"fun LocalDate.getInvertedDateRangeToAsStream(to: LocalDate): Stream<LocalDate>","description":"pw.forst.katlib.getInvertedDateRangeToAsStream","location":"katlib/pw.forst.katlib/get-inverted-date-range-to-as-stream.html","searchKeys":["getInvertedDateRangeToAsStream","fun LocalDate.getInvertedDateRangeToAsStream(to: LocalDate): Stream<LocalDate>","pw.forst.katlib.getInvertedDateRangeToAsStream"]},{"name":"fun LocalDate.getWeekOfYear(locale: Locale = Locale.GERMANY): Int","description":"pw.forst.katlib.getWeekOfYear","location":"katlib/pw.forst.katlib/get-week-of-year.html","searchKeys":["getWeekOfYear","fun LocalDate.getWeekOfYear(locale: Locale = Locale.GERMANY): Int","pw.forst.katlib.getWeekOfYear"]},{"name":"fun LocalDate.setWeekOfYearMonday(week: Int, locale: Locale = Locale.GERMANY): LocalDate","description":"pw.forst.katlib.setWeekOfYearMonday","location":"katlib/pw.forst.katlib/set-week-of-year-monday.html","searchKeys":["setWeekOfYearMonday","fun LocalDate.setWeekOfYearMonday(week: Int, locale: Locale = Locale.GERMANY): LocalDate","pw.forst.katlib.setWeekOfYearMonday"]},{"name":"fun String.isEmail(): Boolean","description":"pw.forst.katlib.isEmail","location":"katlib/pw.forst.katlib/is-email.html","searchKeys":["isEmail","fun String.isEmail(): Boolean","pw.forst.katlib.isEmail"]},{"name":"fun String.isUrl(): Boolean","description":"pw.forst.katlib.isUrl","location":"katlib/pw.forst.katlib/is-url.html","searchKeys":["isUrl","fun String.isUrl(): Boolean","pw.forst.katlib.isUrl"]},{"name":"fun String.isUuid(): Boolean","description":"pw.forst.katlib.isUuid","location":"katlib/pw.forst.katlib/is-uuid.html","searchKeys":["isUuid","fun String.isUuid(): Boolean","pw.forst.katlib.isUuid"]},{"name":"fun String.restrictLengthWithEllipsis(maxLength: Int, ellipsis: String = \"…\"): String","description":"pw.forst.katlib.restrictLengthWithEllipsis","location":"katlib/pw.forst.katlib/restrict-length-with-ellipsis.html","searchKeys":["restrictLengthWithEllipsis","fun String.restrictLengthWithEllipsis(maxLength: Int, ellipsis: String = \"…\"): String","pw.forst.katlib.restrictLengthWithEllipsis"]},{"name":"fun String.startsWithLetter(): Boolean","description":"pw.forst.katlib.startsWithLetter","location":"katlib/pw.forst.katlib/starts-with-letter.html","searchKeys":["startsWithLetter","fun String.startsWithLetter(): Boolean","pw.forst.katlib.startsWithLetter"]},{"name":"fun String.toBase64(): String","description":"pw.forst.katlib.toBase64","location":"katlib/pw.forst.katlib/to-base64.html","searchKeys":["toBase64","fun String.toBase64(): String","pw.forst.katlib.toBase64"]},{"name":"fun String.toUrl(): URL","description":"pw.forst.katlib.toUrl","location":"katlib/pw.forst.katlib/to-url.html","searchKeys":["toUrl","fun String.toUrl(): URL","pw.forst.katlib.toUrl"]},{"name":"fun String.toUuid(): UUID","description":"pw.forst.katlib.toUuid","location":"katlib/pw.forst.katlib/to-uuid.html","searchKeys":["toUuid","fun String.toUuid(): UUID","pw.forst.katlib.toUuid"]},{"name":"fun Throwable.stacktraceToString(): String","description":"pw.forst.katlib.stacktraceToString","location":"katlib/pw.forst.katlib/stacktrace-to-string.html","searchKeys":["stacktraceToString","fun Throwable.stacktraceToString(): String","pw.forst.katlib.stacktraceToString"]},{"name":"fun computeMd5(bytes: ByteArray): String","description":"pw.forst.katlib.computeMd5","location":"katlib/pw.forst.katlib/compute-md5.html","searchKeys":["computeMd5","fun computeMd5(bytes: ByteArray): String","pw.forst.katlib.computeMd5"]},{"name":"fun durationInMilli(a: Instant, b: Instant): Long","description":"pw.forst.katlib.durationInMilli","location":"katlib/pw.forst.katlib/duration-in-milli.html","searchKeys":["durationInMilli","fun durationInMilli(a: Instant, b: Instant): Long","pw.forst.katlib.durationInMilli"]},{"name":"fun getEnv(variableName: String): String?","description":"pw.forst.katlib.getEnv","location":"katlib/pw.forst.katlib/get-env.html","searchKeys":["getEnv","fun getEnv(variableName: String): String?","pw.forst.katlib.getEnv"]},{"name":"fun hashWithSha256(bytes: ByteArray): String","description":"pw.forst.katlib.hashWithSha256","location":"katlib/pw.forst.katlib/hash-with-sha256.html","searchKeys":["hashWithSha256","fun hashWithSha256(bytes: ByteArray): String","pw.forst.katlib.hashWithSha256"]},{"name":"fun hashWithSha256(fileToHash: File): String","description":"pw.forst.katlib.hashWithSha256","location":"katlib/pw.forst.katlib/hash-with-sha256.html","searchKeys":["hashWithSha256","fun hashWithSha256(fileToHash: File): String","pw.forst.katlib.hashWithSha256"]},{"name":"fun hashWithSha256(textToHash: String): String","description":"pw.forst.katlib.hashWithSha256","location":"katlib/pw.forst.katlib/hash-with-sha256.html","searchKeys":["hashWithSha256","fun hashWithSha256(textToHash: String): String","pw.forst.katlib.hashWithSha256"]},{"name":"fun interface TimeProvider<T : Temporal>","description":"pw.forst.katlib.TimeProvider","location":"katlib/pw.forst.katlib/-time-provider/index.html","searchKeys":["TimeProvider","fun interface TimeProvider<T : Temporal>","pw.forst.katlib.TimeProvider"]},{"name":"fun isURL(candidateUrl: String): Boolean","description":"pw.forst.katlib.isURL","location":"katlib/pw.forst.katlib/is-u-r-l.html","searchKeys":["isURL","fun isURL(candidateUrl: String): Boolean","pw.forst.katlib.isURL"]},{"name":"fun isUUID(candidateUuid: String): Boolean","description":"pw.forst.katlib.isUUID","location":"katlib/pw.forst.katlib/is-u-u-i-d.html","searchKeys":["isUUID","fun isUUID(candidateUuid: String): Boolean","pw.forst.katlib.isUUID"]},{"name":"fun isUrl(candidateUrl: String): Boolean","description":"pw.forst.katlib.isUrl","location":"katlib/pw.forst.katlib/is-url.html","searchKeys":["isUrl","fun isUrl(candidateUrl: String): Boolean","pw.forst.katlib.isUrl"]},{"name":"fun isUuid(candidateUuid: String): Boolean","description":"pw.forst.katlib.isUuid","location":"katlib/pw.forst.katlib/is-uuid.html","searchKeys":["isUuid","fun isUuid(candidateUuid: String): Boolean","pw.forst.katlib.isUuid"]},{"name":"fun jacksonMapper(): ObjectMapper","description":"pw.forst.katlib.jacksonMapper","location":"katlib/pw.forst.katlib/jackson-mapper.html","searchKeys":["jacksonMapper","fun jacksonMapper(): ObjectMapper","pw.forst.katlib.jacksonMapper"]},{"name":"fun jacksonMapper(objectMapperSettings: ObjectMapper.() -> Unit): ObjectMapper","description":"pw.forst.katlib.jacksonMapper","location":"katlib/pw.forst.katlib/jackson-mapper.html","searchKeys":["jacksonMapper","fun jacksonMapper(objectMapperSettings: ObjectMapper.() -> Unit): ObjectMapper","pw.forst.katlib.jacksonMapper"]},{"name":"fun prettyPrintJson(json: String): String","description":"pw.forst.katlib.prettyPrintJson","location":"katlib/pw.forst.katlib/pretty-print-json.html","searchKeys":["prettyPrintJson","fun prettyPrintJson(json: String): String","pw.forst.katlib.prettyPrintJson"]},{"name":"infix fun <T : Any> T.with(other: T): List<T>","description":"pw.forst.katlib.with","location":"katlib/pw.forst.katlib/with.html","searchKeys":["with","infix fun <T : Any> T.with(other: T): List<T>","pw.forst.katlib.with"]},{"name":"infix fun String?.equalsIgnoreCase(other: String?): Boolean","description":"pw.forst.katlib.equalsIgnoreCase","location":"katlib/pw.forst.katlib/equals-ignore-case.html","searchKeys":["equalsIgnoreCase","infix fun String?.equalsIgnoreCase(other: String?): Boolean","pw.forst.katlib.equalsIgnoreCase"]},{"name":"inline fun <A, B, C, V> Iterable<A>.zip(b: Iterable<B>, c: Iterable<C>, transform: (A, B, C) -> V): List<V>","description":"pw.forst.katlib.zip","location":"katlib/pw.forst.katlib/zip.html","searchKeys":["zip","inline fun <A, B, C, V> Iterable<A>.zip(b: Iterable<B>, c: Iterable<C>, transform: (A, B, C) -> V): List<V>","pw.forst.katlib.zip"]},{"name":"inline fun <E> buildArray(builderAction: MutableList<E>.() -> Unit): Array<E>","description":"pw.forst.katlib.buildArray","location":"katlib/pw.forst.katlib/build-array.html","searchKeys":["buildArray","inline fun <E> buildArray(builderAction: MutableList<E>.() -> Unit): Array<E>","pw.forst.katlib.buildArray"]},{"name":"inline fun <K, V, M : MutableMap<K, V>> Map<K, V>.mergeReduceTo(destination: M, other: Map<K, V>, reduce: (V, V) -> V = { a, _ -> a }): M","description":"pw.forst.katlib.mergeReduceTo","location":"katlib/pw.forst.katlib/merge-reduce-to.html","searchKeys":["mergeReduceTo","inline fun <K, V, M : MutableMap<K, V>> Map<K, V>.mergeReduceTo(destination: M, other: Map<K, V>, reduce: (V, V) -> V = { a, _ -> a }): M","pw.forst.katlib.mergeReduceTo"]},{"name":"inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.assocWithTo(destination: M, valueSelector: (K) -> V): M","description":"pw.forst.katlib.assocWithTo","location":"katlib/pw.forst.katlib/assoc-with-to.html","searchKeys":["assocWithTo","inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.assocWithTo(destination: M, valueSelector: (K) -> V): M","pw.forst.katlib.assocWithTo"]},{"name":"inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.assocWithTo(destination: M, valueSelector: (K) -> V): M","description":"pw.forst.katlib.assocWithTo","location":"katlib/pw.forst.katlib/assoc-with-to.html","searchKeys":["assocWithTo","inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.assocWithTo(destination: M, valueSelector: (K) -> V): M","pw.forst.katlib.assocWithTo"]},{"name":"inline fun <K, V1, V2, VR, M : MutableMap<K, VR>> Map<K, V1>.joinTo(destination: M, other: Map<K, V2>, join: (V1?, V2?) -> VR): M","description":"pw.forst.katlib.joinTo","location":"katlib/pw.forst.katlib/join-to.html","searchKeys":["joinTo","inline fun <K, V1, V2, VR, M : MutableMap<K, VR>> Map<K, V1>.joinTo(destination: M, other: Map<K, V2>, join: (V1?, V2?) -> VR): M","pw.forst.katlib.joinTo"]},{"name":"inline fun <K, V1, V2, VR> Map<K, V1>.join(other: Map<K, V2>, join: (V1?, V2?) -> VR): Map<K, VR>","description":"pw.forst.katlib.join","location":"katlib/pw.forst.katlib/join.html","searchKeys":["join","inline fun <K, V1, V2, VR> Map<K, V1>.join(other: Map<K, V2>, join: (V1?, V2?) -> VR): Map<K, VR>","pw.forst.katlib.join"]},{"name":"inline fun <K, V> Iterable<K>.assocWith(valueSelector: (K) -> V): Map<K, V>","description":"pw.forst.katlib.assocWith","location":"katlib/pw.forst.katlib/assoc-with.html","searchKeys":["assocWith","inline fun <K, V> Iterable<K>.assocWith(valueSelector: (K) -> V): Map<K, V>","pw.forst.katlib.assocWith"]},{"name":"inline fun <K, V> Map<K, V>.mergeReduce(other: Map<K, V>, reduce: (V, V) -> V = { a, _ -> a }): Map<K, V>","description":"pw.forst.katlib.mergeReduce","location":"katlib/pw.forst.katlib/merge-reduce.html","searchKeys":["mergeReduce","inline fun <K, V> Map<K, V>.mergeReduce(other: Map<K, V>, reduce: (V, V) -> V = { a, _ -> a }): Map<K, V>","pw.forst.katlib.mergeReduce"]},{"name":"inline fun <K, V> Sequence<K>.assocWith(valueSelector: (K) -> V): Map<K, V>","description":"pw.forst.katlib.assocWith","location":"katlib/pw.forst.katlib/assoc-with.html","searchKeys":["assocWith","inline fun <K, V> Sequence<K>.assocWith(valueSelector: (K) -> V): Map<K, V>","pw.forst.katlib.assocWith"]},{"name":"inline fun <K1, K2, K3, KR1, KR2, KR3, V, M3 : MutableMap<KR3, V>, M2 : MutableMap<KR2, M3>, M1 : MutableMap<KR1, M2>> Map<K1, Map<K2, Map<K3, V>>>.swapKeysTo(topDestination: M1, middleDestination: () -> M2, bottomDestination: () -> M3, transform: (K1, K2, K3) -> Triple<KR1, KR2, KR3>): M1","description":"pw.forst.katlib.swapKeysTo","location":"katlib/pw.forst.katlib/swap-keys-to.html","searchKeys":["swapKeysTo","inline fun <K1, K2, K3, KR1, KR2, KR3, V, M3 : MutableMap<KR3, V>, M2 : MutableMap<KR2, M3>, M1 : MutableMap<KR1, M2>> Map<K1, Map<K2, Map<K3, V>>>.swapKeysTo(topDestination: M1, middleDestination: () -> M2, bottomDestination: () -> M3, transform: (K1, K2, K3) -> Triple<KR1, KR2, KR3>): M1","pw.forst.katlib.swapKeysTo"]},{"name":"inline fun <K1, K2, K3, KR1, KR2, KR3, V> Map<K1, Map<K2, Map<K3, V>>>.swapKeys(transform: (K1, K2, K3) -> Triple<KR1, KR2, KR3>): Map<KR1, Map<KR2, Map<KR3, V>>>","description":"pw.forst.katlib.swapKeys","location":"katlib/pw.forst.katlib/swap-keys.html","searchKeys":["swapKeys","inline fun <K1, K2, K3, KR1, KR2, KR3, V> Map<K1, Map<K2, Map<K3, V>>>.swapKeys(transform: (K1, K2, K3) -> Triple<KR1, KR2, KR3>): Map<KR1, Map<KR2, Map<KR3, V>>>","pw.forst.katlib.swapKeys"]},{"name":"inline fun <K1, K2, K3, V, M3 : MutableMap<K3, V>, M2 : MutableMap<K2, M3>, M1 : MutableMap<K1, M2>> Map<Triple<K1, K2, K3>, V>.toThreeLevelMap(topDestination: M1, middleDestination: () -> M2, bottomDestination: () -> M3): M1","description":"pw.forst.katlib.toThreeLevelMap","location":"katlib/pw.forst.katlib/to-three-level-map.html","searchKeys":["toThreeLevelMap","inline fun <K1, K2, K3, V, M3 : MutableMap<K3, V>, M2 : MutableMap<K2, M3>, M1 : MutableMap<K1, M2>> Map<Triple<K1, K2, K3>, V>.toThreeLevelMap(topDestination: M1, middleDestination: () -> M2, bottomDestination: () -> M3): M1","pw.forst.katlib.toThreeLevelMap"]},{"name":"inline fun <K1, K2, V, M2 : MutableMap<K1, V>, M1 : MutableMap<K2, M2>> Map<K1, Map<K2, V>>.swapKeysTo(topDestination: M1, bottomDestination: () -> M2): M1","description":"pw.forst.katlib.swapKeysTo","location":"katlib/pw.forst.katlib/swap-keys-to.html","searchKeys":["swapKeysTo","inline fun <K1, K2, V, M2 : MutableMap<K1, V>, M1 : MutableMap<K2, M2>> Map<K1, Map<K2, V>>.swapKeysTo(topDestination: M1, bottomDestination: () -> M2): M1","pw.forst.katlib.swapKeysTo"]},{"name":"inline fun <K1, K2, V, M2 : MutableMap<K2, V>, M1 : MutableMap<K1, M2>> List<Pair<Pair<K1, K2>, V>>.toTwoLevelMap(topDestination: M1, bottomDestination: () -> M2): M1","description":"pw.forst.katlib.toTwoLevelMap","location":"katlib/pw.forst.katlib/to-two-level-map.html","searchKeys":["toTwoLevelMap","inline fun <K1, K2, V, M2 : MutableMap<K2, V>, M1 : MutableMap<K1, M2>> List<Pair<Pair<K1, K2>, V>>.toTwoLevelMap(topDestination: M1, bottomDestination: () -> M2): M1","pw.forst.katlib.toTwoLevelMap"]},{"name":"inline fun <K1, K2, V, M2 : MutableMap<K2, V>, M1 : MutableMap<K1, M2>> Map<Pair<K1, K2>, V>.toTwoLevelMap(topDestination: M1, bottomDestination: () -> M2): M1","description":"pw.forst.katlib.toTwoLevelMap","location":"katlib/pw.forst.katlib/to-two-level-map.html","searchKeys":["toTwoLevelMap","inline fun <K1, K2, V, M2 : MutableMap<K2, V>, M1 : MutableMap<K1, M2>> Map<Pair<K1, K2>, V>.toTwoLevelMap(topDestination: M1, bottomDestination: () -> M2): M1","pw.forst.katlib.toTwoLevelMap"]},{"name":"inline fun <R> Array<*>.filterIsInstance(): Array<R>","description":"pw.forst.katlib.filterIsInstance","location":"katlib/pw.forst.katlib/filter-is-instance.html","searchKeys":["filterIsInstance","inline fun <R> Array<*>.filterIsInstance(): Array<R>","pw.forst.katlib.filterIsInstance"]},{"name":"inline fun <S, T : S> Iterable<T>.foldValidated(validationFunction: (S, T) -> Boolean): Boolean","description":"pw.forst.katlib.foldValidated","location":"katlib/pw.forst.katlib/fold-validated.html","searchKeys":["foldValidated","inline fun <S, T : S> Iterable<T>.foldValidated(validationFunction: (S, T) -> Boolean): Boolean","pw.forst.katlib.foldValidated"]},{"name":"inline fun <T : Any, R : Any> Iterable<T?>.filterNotNullBy(selector: (T) -> R?): List<T>","description":"pw.forst.katlib.filterNotNullBy","location":"katlib/pw.forst.katlib/filter-not-null-by.html","searchKeys":["filterNotNullBy","inline fun <T : Any, R : Any> Iterable<T?>.filterNotNullBy(selector: (T) -> R?): List<T>","pw.forst.katlib.filterNotNullBy"]},{"name":"inline fun <T : Any, V : Any> T.applyIfNotNull(value: V?, block: T.(V) -> Unit): T","description":"pw.forst.katlib.applyIfNotNull","location":"katlib/pw.forst.katlib/apply-if-not-null.html","searchKeys":["applyIfNotNull","inline fun <T : Any, V : Any> T.applyIfNotNull(value: V?, block: T.(V) -> Unit): T","pw.forst.katlib.applyIfNotNull"]},{"name":"inline fun <T : Any> Array<out T?>.filterNotNull(): Array<T>","description":"pw.forst.katlib.filterNotNull","location":"katlib/pw.forst.katlib/filter-not-null.html","searchKeys":["filterNotNull","inline fun <T : Any> Array<out T?>.filterNotNull(): Array<T>","pw.forst.katlib.filterNotNull"]},{"name":"inline fun <T : Any> Iterable<T?>.forEachNotNull(action: (T) -> Unit)","description":"pw.forst.katlib.forEachNotNull","location":"katlib/pw.forst.katlib/for-each-not-null.html","searchKeys":["forEachNotNull","inline fun <T : Any> Iterable<T?>.forEachNotNull(action: (T) -> Unit)","pw.forst.katlib.forEachNotNull"]},{"name":"inline fun <T : Any> T.applyIf(shouldApply: Boolean, block: T.() -> Unit): T","description":"pw.forst.katlib.applyIf","location":"katlib/pw.forst.katlib/apply-if.html","searchKeys":["applyIf","inline fun <T : Any> T.applyIf(shouldApply: Boolean, block: T.() -> Unit): T","pw.forst.katlib.applyIf"]},{"name":"inline fun <T : Any> T.applyIf(shouldApplyBlock: (T) -> Boolean, block: T.() -> Unit): T","description":"pw.forst.katlib.applyIf","location":"katlib/pw.forst.katlib/apply-if.html","searchKeys":["applyIf","inline fun <T : Any> T.applyIf(shouldApplyBlock: (T) -> Boolean, block: T.() -> Unit): T","pw.forst.katlib.applyIf"]},{"name":"inline fun <T : Any> T.propertiesFromResources(resourcesPath: String): Properties?","description":"pw.forst.katlib.propertiesFromResources","location":"katlib/pw.forst.katlib/properties-from-resources.html","searchKeys":["propertiesFromResources","inline fun <T : Any> T.propertiesFromResources(resourcesPath: String): Properties?","pw.forst.katlib.propertiesFromResources"]},{"name":"inline fun <T : Any> kClass(): KClass<T>","description":"pw.forst.katlib.kClass","location":"katlib/pw.forst.katlib/k-class.html","searchKeys":["kClass","inline fun <T : Any> kClass(): KClass<T>","pw.forst.katlib.kClass"]},{"name":"inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.assocByTo(destination: M, keySelector: (T) -> K): M","description":"pw.forst.katlib.assocByTo","location":"katlib/pw.forst.katlib/assoc-by-to.html","searchKeys":["assocByTo","inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.assocByTo(destination: M, keySelector: (T) -> K): M","pw.forst.katlib.assocByTo"]},{"name":"inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.assocByTo(destination: M, keySelector: (T) -> K): M","description":"pw.forst.katlib.assocByTo","location":"katlib/pw.forst.katlib/assoc-by-to.html","searchKeys":["assocByTo","inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.assocByTo(destination: M, keySelector: (T) -> K): M","pw.forst.katlib.assocByTo"]},{"name":"inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.assocByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M","description":"pw.forst.katlib.assocByTo","location":"katlib/pw.forst.katlib/assoc-by-to.html","searchKeys":["assocByTo","inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.assocByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M","pw.forst.katlib.assocByTo"]},{"name":"inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.assocTo(destination: M, transform: (T) -> Pair<K, V>): M","description":"pw.forst.katlib.assocTo","location":"katlib/pw.forst.katlib/assoc-to.html","searchKeys":["assocTo","inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.assocTo(destination: M, transform: (T) -> Pair<K, V>): M","pw.forst.katlib.assocTo"]},{"name":"inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.assocByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M","description":"pw.forst.katlib.assocByTo","location":"katlib/pw.forst.katlib/assoc-by-to.html","searchKeys":["assocByTo","inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.assocByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M","pw.forst.katlib.assocByTo"]},{"name":"inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.assocTo(destination: M, transform: (T) -> Pair<K, V>): M","description":"pw.forst.katlib.assocTo","location":"katlib/pw.forst.katlib/assoc-to.html","searchKeys":["assocTo","inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.assocTo(destination: M, transform: (T) -> Pair<K, V>): M","pw.forst.katlib.assocTo"]},{"name":"inline fun <T, K, V> Iterable<T>.assoc(transform: (T) -> Pair<K, V>): Map<K, V>","description":"pw.forst.katlib.assoc","location":"katlib/pw.forst.katlib/assoc.html","searchKeys":["assoc","inline fun <T, K, V> Iterable<T>.assoc(transform: (T) -> Pair<K, V>): Map<K, V>","pw.forst.katlib.assoc"]},{"name":"inline fun <T, K, V> Iterable<T>.assocBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V>","description":"pw.forst.katlib.assocBy","location":"katlib/pw.forst.katlib/assoc-by.html","searchKeys":["assocBy","inline fun <T, K, V> Iterable<T>.assocBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V>","pw.forst.katlib.assocBy"]},{"name":"inline fun <T, K, V> Sequence<T>.assoc(transform: (T) -> Pair<K, V>): Map<K, V>","description":"pw.forst.katlib.assoc","location":"katlib/pw.forst.katlib/assoc.html","searchKeys":["assoc","inline fun <T, K, V> Sequence<T>.assoc(transform: (T) -> Pair<K, V>): Map<K, V>","pw.forst.katlib.assoc"]},{"name":"inline fun <T, K, V> Sequence<T>.assocBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V>","description":"pw.forst.katlib.assocBy","location":"katlib/pw.forst.katlib/assoc-by.html","searchKeys":["assocBy","inline fun <T, K, V> Sequence<T>.assocBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V>","pw.forst.katlib.assocBy"]},{"name":"inline fun <T, K> Iterable<T>.assocBy(keySelector: (T) -> K): Map<K, T>","description":"pw.forst.katlib.assocBy","location":"katlib/pw.forst.katlib/assoc-by.html","searchKeys":["assocBy","inline fun <T, K> Iterable<T>.assocBy(keySelector: (T) -> K): Map<K, T>","pw.forst.katlib.assocBy"]},{"name":"inline fun <T, K> Sequence<T>.assocBy(keySelector: (T) -> K): Map<K, T>","description":"pw.forst.katlib.assocBy","location":"katlib/pw.forst.katlib/assoc-by.html","searchKeys":["assocBy","inline fun <T, K> Sequence<T>.assocBy(keySelector: (T) -> K): Map<K, T>","pw.forst.katlib.assocBy"]},{"name":"inline fun <T, NT, V> Pair<Iterable<T>, V>.mapLeft(block: (T) -> NT): Pair<Iterable<NT>, V>","description":"pw.forst.katlib.mapLeft","location":"katlib/pw.forst.katlib/map-left.html","searchKeys":["mapLeft","inline fun <T, NT, V> Pair<Iterable<T>, V>.mapLeft(block: (T) -> NT): Pair<Iterable<NT>, V>","pw.forst.katlib.mapLeft"]},{"name":"inline fun <T, NT, V> Pair<T, V>.letLeft(block: (T) -> NT): Pair<NT, V>","description":"pw.forst.katlib.letLeft","location":"katlib/pw.forst.katlib/let-left.html","searchKeys":["letLeft","inline fun <T, NT, V> Pair<T, V>.letLeft(block: (T) -> NT): Pair<NT, V>","pw.forst.katlib.letLeft"]},{"name":"inline fun <T, R : Comparable<R>> Iterable<T>.maxValueBy(selector: (T) -> R): R?","description":"pw.forst.katlib.maxValueBy","location":"katlib/pw.forst.katlib/max-value-by.html","searchKeys":["maxValueBy","inline fun <T, R : Comparable<R>> Iterable<T>.maxValueBy(selector: (T) -> R): R?","pw.forst.katlib.maxValueBy"]},{"name":"inline fun <T, R : Comparable<R>> Iterable<T>.minValueBy(selector: (T) -> R): R?","description":"pw.forst.katlib.minValueBy","location":"katlib/pw.forst.katlib/min-value-by.html","searchKeys":["minValueBy","inline fun <T, R : Comparable<R>> Iterable<T>.minValueBy(selector: (T) -> R): R?","pw.forst.katlib.minValueBy"]},{"name":"inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>?): C","description":"pw.forst.katlib.flatMapIndexedTo","location":"katlib/pw.forst.katlib/flat-map-indexed-to.html","searchKeys":["flatMapIndexedTo","inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>?): C","pw.forst.katlib.flatMapIndexedTo"]},{"name":"inline fun <T, R> Array<out T>.map(transform: (T) -> R): Array<R>","description":"pw.forst.katlib.map","location":"katlib/pw.forst.katlib/map.html","searchKeys":["map","inline fun <T, R> Array<out T>.map(transform: (T) -> R): Array<R>","pw.forst.katlib.map"]},{"name":"inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): Array<R>","description":"pw.forst.katlib.mapIndexed","location":"katlib/pw.forst.katlib/map-indexed.html","searchKeys":["mapIndexed","inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): Array<R>","pw.forst.katlib.mapIndexed"]},{"name":"inline fun <T, R> Iterable<T>.dominantValueBy(crossinline selector: (T) -> R): R?","description":"pw.forst.katlib.dominantValueBy","location":"katlib/pw.forst.katlib/dominant-value-by.html","searchKeys":["dominantValueBy","inline fun <T, R> Iterable<T>.dominantValueBy(crossinline selector: (T) -> R): R?","pw.forst.katlib.dominantValueBy"]},{"name":"inline fun <T, R> Iterable<T>.flatMapIndexedNotNull(transform: (index: Int, T) -> Iterable<R>?): List<R>","description":"pw.forst.katlib.flatMapIndexedNotNull","location":"katlib/pw.forst.katlib/flat-map-indexed-not-null.html","searchKeys":["flatMapIndexedNotNull","inline fun <T, R> Iterable<T>.flatMapIndexedNotNull(transform: (index: Int, T) -> Iterable<R>?): List<R>","pw.forst.katlib.flatMapIndexedNotNull"]},{"name":"inline fun <T, R> Iterable<T>.flatMapToSet(transform: (T) -> Iterable<R>): Set<R>","description":"pw.forst.katlib.flatMapToSet","location":"katlib/pw.forst.katlib/flat-map-to-set.html","searchKeys":["flatMapToSet","inline fun <T, R> Iterable<T>.flatMapToSet(transform: (T) -> Iterable<R>): Set<R>","pw.forst.katlib.flatMapToSet"]},{"name":"inline fun <T, R> Iterable<T>.mapToSet(transform: (T) -> R): Set<R>","description":"pw.forst.katlib.mapToSet","location":"katlib/pw.forst.katlib/map-to-set.html","searchKeys":["mapToSet","inline fun <T, R> Iterable<T>.mapToSet(transform: (T) -> R): Set<R>","pw.forst.katlib.mapToSet"]},{"name":"inline fun <T, R> Iterable<T>.reduction(initial: R, operation: (R, T) -> R): List<R>","description":"pw.forst.katlib.reduction","location":"katlib/pw.forst.katlib/reduction.html","searchKeys":["reduction","inline fun <T, R> Iterable<T>.reduction(initial: R, operation: (R, T) -> R): List<R>","pw.forst.katlib.reduction"]},{"name":"inline fun <T, R> Iterable<T>.setDifferenceBy(other: Iterable<T>, selector: (T) -> R): List<T>","description":"pw.forst.katlib.setDifferenceBy","location":"katlib/pw.forst.katlib/set-difference-by.html","searchKeys":["setDifferenceBy","inline fun <T, R> Iterable<T>.setDifferenceBy(other: Iterable<T>, selector: (T) -> R): List<T>","pw.forst.katlib.setDifferenceBy"]},{"name":"inline fun <T, V, NT, NV> Pair<Iterable<T>, Iterable<V>>.mapPair(leftBlock: (T) -> NT, rightBlock: (V) -> NV): Pair<Iterable<NT>, Iterable<NV>>","description":"pw.forst.katlib.mapPair","location":"katlib/pw.forst.katlib/map-pair.html","searchKeys":["mapPair","inline fun <T, V, NT, NV> Pair<Iterable<T>, Iterable<V>>.mapPair(leftBlock: (T) -> NT, rightBlock: (V) -> NV): Pair<Iterable<NT>, Iterable<NV>>","pw.forst.katlib.mapPair"]},{"name":"inline fun <T, V, NT, NV> Pair<T, V>.letPair(leftBlock: (T) -> NT, rightBlock: (V) -> NV): Pair<NT, NV>","description":"pw.forst.katlib.letPair","location":"katlib/pw.forst.katlib/let-pair.html","searchKeys":["letPair","inline fun <T, V, NT, NV> Pair<T, V>.letPair(leftBlock: (T) -> NT, rightBlock: (V) -> NV): Pair<NT, NV>","pw.forst.katlib.letPair"]},{"name":"inline fun <T, V, NV> Pair<T, Iterable<V>>.mapRight(block: (V) -> NV): Pair<T, Iterable<NV>>","description":"pw.forst.katlib.mapRight","location":"katlib/pw.forst.katlib/map-right.html","searchKeys":["mapRight","inline fun <T, V, NV> Pair<T, Iterable<V>>.mapRight(block: (V) -> NV): Pair<T, Iterable<NV>>","pw.forst.katlib.mapRight"]},{"name":"inline fun <T, V, NV> Pair<T, V>.letRight(block: (V) -> NV): Pair<T, NV>","description":"pw.forst.katlib.letRight","location":"katlib/pw.forst.katlib/let-right.html","searchKeys":["letRight","inline fun <T, V, NV> Pair<T, V>.letRight(block: (V) -> NV): Pair<T, NV>","pw.forst.katlib.letRight"]},{"name":"inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): Array<T>","description":"pw.forst.katlib.filter","location":"katlib/pw.forst.katlib/filter.html","searchKeys":["filter","inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): Array<T>","pw.forst.katlib.filter"]},{"name":"inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Array<T>","description":"pw.forst.katlib.filterIndexed","location":"katlib/pw.forst.katlib/filter-indexed.html","searchKeys":["filterIndexed","inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Array<T>","pw.forst.katlib.filterIndexed"]},{"name":"inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): Array<T>","description":"pw.forst.katlib.filterNot","location":"katlib/pw.forst.katlib/filter-not.html","searchKeys":["filterNot","inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): Array<T>","pw.forst.katlib.filterNot"]},{"name":"inline fun <T> Iterable<T>.singleOrEmpty(predicate: (T) -> Boolean): T?","description":"pw.forst.katlib.singleOrEmpty","location":"katlib/pw.forst.katlib/single-or-empty.html","searchKeys":["singleOrEmpty","inline fun <T> Iterable<T>.singleOrEmpty(predicate: (T) -> Boolean): T?","pw.forst.katlib.singleOrEmpty"]},{"name":"inline fun <T> Iterable<T>.sumByFloat(selector: (T) -> Float): Float","description":"pw.forst.katlib.sumByFloat","location":"katlib/pw.forst.katlib/sum-by-float.html","searchKeys":["sumByFloat","inline fun <T> Iterable<T>.sumByFloat(selector: (T) -> Float): Float","pw.forst.katlib.sumByFloat"]},{"name":"inline fun <T> Iterable<T>.sumByLong(selector: (T) -> Long): Long","description":"pw.forst.katlib.sumByLong","location":"katlib/pw.forst.katlib/sum-by-long.html","searchKeys":["sumByLong","inline fun <T> Iterable<T>.sumByLong(selector: (T) -> Long): Long","pw.forst.katlib.sumByLong"]},{"name":"inline fun <T> Iterable<T>.withEach(action: T.() -> Unit)","description":"pw.forst.katlib.withEach","location":"katlib/pw.forst.katlib/with-each.html","searchKeys":["withEach","inline fun <T> Iterable<T>.withEach(action: T.() -> Unit)","pw.forst.katlib.withEach"]},{"name":"inline fun <T> Iterable<T>.withEachIndexed(action: T.(index: Int) -> Unit)","description":"pw.forst.katlib.withEachIndexed","location":"katlib/pw.forst.katlib/with-each-indexed.html","searchKeys":["withEachIndexed","inline fun <T> Iterable<T>.withEachIndexed(action: T.(index: Int) -> Unit)","pw.forst.katlib.withEachIndexed"]},{"name":"inline fun <T> Sequence<T>.sumByLong(selector: (T) -> Long): Long","description":"pw.forst.katlib.sumByLong","location":"katlib/pw.forst.katlib/sum-by-long.html","searchKeys":["sumByLong","inline fun <T> Sequence<T>.sumByLong(selector: (T) -> Long): Long","pw.forst.katlib.sumByLong"]},{"name":"inline fun <T> T.validate(isValid: Boolean, invalidBlock: (T) -> Unit): T","description":"pw.forst.katlib.validate","location":"katlib/pw.forst.katlib/validate.html","searchKeys":["validate","inline fun <T> T.validate(isValid: Boolean, invalidBlock: (T) -> Unit): T","pw.forst.katlib.validate"]},{"name":"inline fun <T> T.validate(isValidSelector: (T) -> Boolean, invalidBlock: (T) -> Unit): T","description":"pw.forst.katlib.validate","location":"katlib/pw.forst.katlib/validate.html","searchKeys":["validate","inline fun <T> T.validate(isValidSelector: (T) -> Boolean, invalidBlock: (T) -> Unit): T","pw.forst.katlib.validate"]},{"name":"inline fun <T> T.whenNull(block: () -> Unit): T","description":"pw.forst.katlib.whenNull","location":"katlib/pw.forst.katlib/when-null.html","searchKeys":["whenNull","inline fun <T> T.whenNull(block: () -> Unit): T","pw.forst.katlib.whenNull"]},{"name":"inline fun <T> parseJson(json: ByteArray, logParserException: Boolean = true): T?","description":"pw.forst.katlib.parseJson","location":"katlib/pw.forst.katlib/parse-json.html","searchKeys":["parseJson","inline fun <T> parseJson(json: ByteArray, logParserException: Boolean = true): T?","pw.forst.katlib.parseJson"]},{"name":"inline fun <T> parseJson(json: String, logParserException: Boolean = true): T?","description":"pw.forst.katlib.parseJson","location":"katlib/pw.forst.katlib/parse-json.html","searchKeys":["parseJson","inline fun <T> parseJson(json: String, logParserException: Boolean = true): T?","pw.forst.katlib.parseJson"]},{"name":"inline fun <TItem> Iterable<TItem>.itemsToString(itemsType: String = \"items\", separator: String = \", \", itemLength: Int = 30, totalLength: Int = 200, itemToString: (TItem) -> String = { item -> item.toShortString() }): String","description":"pw.forst.katlib.itemsToString","location":"katlib/pw.forst.katlib/items-to-string.html","searchKeys":["itemsToString","inline fun <TItem> Iterable<TItem>.itemsToString(itemsType: String = \"items\", separator: String = \", \", itemLength: Int = 30, totalLength: Int = 200, itemToString: (TItem) -> String = { item -> item.toShortString() }): String","pw.forst.katlib.itemsToString"]},{"name":"inline fun Boolean.whenFalse(block: () -> Unit): Boolean","description":"pw.forst.katlib.whenFalse","location":"katlib/pw.forst.katlib/when-false.html","searchKeys":["whenFalse","inline fun Boolean.whenFalse(block: () -> Unit): Boolean","pw.forst.katlib.whenFalse"]},{"name":"inline fun Boolean.whenTrue(block: () -> Unit): Boolean","description":"pw.forst.katlib.whenTrue","location":"katlib/pw.forst.katlib/when-true.html","searchKeys":["whenTrue","inline fun Boolean.whenTrue(block: () -> Unit): Boolean","pw.forst.katlib.whenTrue"]},{"name":"inline fun getEnv(variableName: String, recoverBlock: () -> String): String","description":"pw.forst.katlib.getEnv","location":"katlib/pw.forst.katlib/get-env.html","searchKeys":["getEnv","inline fun getEnv(variableName: String, recoverBlock: () -> String): String","pw.forst.katlib.getEnv"]},{"name":"inline operator fun <T> Array<out T>.minus(element: T): Array<T>","description":"pw.forst.katlib.minus","location":"katlib/pw.forst.katlib/minus.html","searchKeys":["minus","inline operator fun <T> Array<out T>.minus(element: T): Array<T>","pw.forst.katlib.minus"]},{"name":"inline operator fun <T> Array<out T>.minus(elements: Array<out T>): Array<T>","description":"pw.forst.katlib.minus","location":"katlib/pw.forst.katlib/minus.html","searchKeys":["minus","inline operator fun <T> Array<out T>.minus(elements: Array<out T>): Array<T>","pw.forst.katlib.minus"]},{"name":"object InstantTimeProvider : TimeProvider<Instant> ","description":"pw.forst.katlib.InstantTimeProvider","location":"katlib/pw.forst.katlib/-instant-time-provider/index.html","searchKeys":["InstantTimeProvider","object InstantTimeProvider : TimeProvider<Instant> ","pw.forst.katlib.InstantTimeProvider"]},{"name":"object LocalDateTimeProvider : TimeProvider<LocalDateTime> ","description":"pw.forst.katlib.LocalDateTimeProvider","location":"katlib/pw.forst.katlib/-local-date-time-provider/index.html","searchKeys":["LocalDateTimeProvider","object LocalDateTimeProvider : TimeProvider<LocalDateTime> ","pw.forst.katlib.LocalDateTimeProvider"]},{"name":"open override fun now(): Instant","description":"pw.forst.katlib.InstantTimeProvider.now","location":"katlib/pw.forst.katlib/-instant-time-provider/now.html","searchKeys":["now","open override fun now(): Instant","pw.forst.katlib.InstantTimeProvider.now"]},{"name":"open override fun now(): LocalDateTime","description":"pw.forst.katlib.LocalDateTimeProvider.now","location":"katlib/pw.forst.katlib/-local-date-time-provider/now.html","searchKeys":["now","open override fun now(): LocalDateTime","pw.forst.katlib.LocalDateTimeProvider.now"]},{"name":"val newLine: String","description":"pw.forst.katlib.newLine","location":"katlib/pw.forst.katlib/new-line.html","searchKeys":["newLine","val newLine: String","pw.forst.katlib.newLine"]}]
