var pages = [{'name': 'fun <T : Any> T.asList(): List<T>', 'description':'pw.forst.tools.katlib.asList', 'location':'katlib/pw.forst.tools.katlib/as-list.html', 'searchKey':'asList'},
{'name': 'fun <T1, T2> Iterable<T1>.cartesianProduct(other: Iterable<T2>): Set<Pair<T1, T2>>', 'description':'pw.forst.tools.katlib.cartesianProduct', 'location':'katlib/pw.forst.tools.katlib/cartesian-product.html', 'searchKey':'cartesianProduct'},
{'name': 'fun <T : Any> createJson(value: T): String', 'description':'pw.forst.tools.katlib.createJson', 'location':'katlib/pw.forst.tools.katlib/create-json.html', 'searchKey':'createJson'},
{'name': 'fun <T : Any> createJsonBytes(value: T): ByteArray', 'description':'pw.forst.tools.katlib.createJsonBytes', 'location':'katlib/pw.forst.tools.katlib/create-json-bytes.html', 'searchKey':'createJsonBytes'},
{'name': 'fun <T : Any> createPrettyJson(value: T): String', 'description':'pw.forst.tools.katlib.createPrettyJson', 'location':'katlib/pw.forst.tools.katlib/create-pretty-json.html', 'searchKey':'createPrettyJson'},
{'name': 'inline fun <T, R> Iterable<T>.dominantValueBy(crossinline selector: (T) -> R): R?', 'description':'pw.forst.tools.katlib.dominantValueBy', 'location':'katlib/pw.forst.tools.katlib/dominant-value-by.html', 'searchKey':'dominantValueBy'},
{'name': 'fun durationInMilli(a: Instant, b: Instant): Long', 'description':'pw.forst.tools.katlib.durationInMilli', 'location':'katlib/pw.forst.tools.katlib/duration-in-milli.html', 'searchKey':'durationInMilli'},
{'name': 'fun Instant.durationToInMilli(other: Instant): Long', 'description':'pw.forst.tools.katlib.durationToInMilli', 'location':'katlib/pw.forst.tools.katlib/duration-to-in-milli.html', 'searchKey':'durationToInMilli'},
{'name': 'inline fun <T : Any, R : Any> Iterable<T?>.filterNotNullBy(selector: (T) -> R?): List<T>', 'description':'pw.forst.tools.katlib.filterNotNullBy', 'location':'katlib/pw.forst.tools.katlib/filter-not-null-by.html', 'searchKey':'filterNotNullBy'},
{'name': 'inline fun <T, R> Iterable<T>.flatMapIndexedNotNull(transform: (Int, T) -> Iterable<R>?): List<R>', 'description':'pw.forst.tools.katlib.flatMapIndexedNotNull', 'location':'katlib/pw.forst.tools.katlib/flat-map-indexed-not-null.html', 'searchKey':'flatMapIndexedNotNull'},
{'name': 'inline fun <T, R, C : MutableCollection<In R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (Int, T) -> Iterable<R>?): C', 'description':'pw.forst.tools.katlib.flatMapIndexedTo', 'location':'katlib/pw.forst.tools.katlib/flat-map-indexed-to.html', 'searchKey':'flatMapIndexedTo'},
{'name': 'inline fun <T, R> Iterable<T>.flatMapToSet(transform: (T) -> Iterable<R>): Set<R>', 'description':'pw.forst.tools.katlib.flatMapToSet', 'location':'katlib/pw.forst.tools.katlib/flat-map-to-set.html', 'searchKey':'flatMapToSet'},
{'name': 'fun <K, V : Any> Iterable<Map<K, List<V>>>.flatMerge(): Map<K, List<V>>', 'description':'pw.forst.tools.katlib.flatMerge', 'location':'katlib/pw.forst.tools.katlib/flat-merge.html', 'searchKey':'flatMerge'},
{'name': 'fun <A, B, C> Iterable<Triple<A, B, C>>.flattenToLists(): Triple<List<A>, List<B>, List<C>>', 'description':'pw.forst.tools.katlib.flattenToLists', 'location':'katlib/pw.forst.tools.katlib/flatten-to-lists.html', 'searchKey':'flattenToLists'},
{'name': 'inline fun <S, T : S> Iterable<T>.foldValidated(validationFunction: (S, T) -> Boolean): Boolean', 'description':'pw.forst.tools.katlib.foldValidated', 'location':'katlib/pw.forst.tools.katlib/fold-validated.html', 'searchKey':'foldValidated'},
{'name': 'inline fun <T : Any> Iterable<T?>.forEachNotNull(action: (T) -> Unit)', 'description':'pw.forst.tools.katlib.forEachNotNull', 'location':'katlib/pw.forst.tools.katlib/for-each-not-null.html', 'searchKey':'forEachNotNull'},
{'name': 'fun LocalDate.getDateRangeTo(to: LocalDate): List<LocalDate>', 'description':'pw.forst.tools.katlib.getDateRangeTo', 'location':'katlib/pw.forst.tools.katlib/get-date-range-to.html', 'searchKey':'getDateRangeTo'},
{'name': 'fun LocalDate.getDateRangeToAsStream(to: LocalDate): Stream<LocalDate>', 'description':'pw.forst.tools.katlib.getDateRangeToAsStream', 'location':'katlib/pw.forst.tools.katlib/get-date-range-to-as-stream.html', 'searchKey':'getDateRangeToAsStream'},
{'name': 'fun LocalDate.getDayDifference(to: LocalDate): Int', 'description':'pw.forst.tools.katlib.getDayDifference', 'location':'katlib/pw.forst.tools.katlib/get-day-difference.html', 'searchKey':'getDayDifference'},
{'name': 'fun LocalDate.getDaysInInterval(to: LocalDate): Int', 'description':'pw.forst.tools.katlib.getDaysInInterval', 'location':'katlib/pw.forst.tools.katlib/get-days-in-interval.html', 'searchKey':'getDaysInInterval'},
{'name': 'fun getEnv(variableName: String): String?', 'description':'pw.forst.tools.katlib.getEnv', 'location':'katlib/pw.forst.tools.katlib/get-env.html', 'searchKey':'getEnv'},
{'name': 'fun LocalDate.getInvertedDateRangeToAsStream(to: LocalDate): Stream<LocalDate>', 'description':'pw.forst.tools.katlib.getInvertedDateRangeToAsStream', 'location':'katlib/pw.forst.tools.katlib/get-inverted-date-range-to-as-stream.html', 'searchKey':'getInvertedDateRangeToAsStream'},
{'name': 'fun <T> Map<T, Double>.getKeysInWeightedRandomOrder(normalizer: Double, rand: Random): List<T>', 'description':'pw.forst.tools.katlib.getKeysInWeightedRandomOrder', 'location':'katlib/pw.forst.tools.katlib/get-keys-in-weighted-random-order.html', 'searchKey':'getKeysInWeightedRandomOrder'},
{'name': 'fun <E> Iterable<E>.getRandomElement(rand: Random): E', 'description':'pw.forst.tools.katlib.getRandomElement', 'location':'katlib/pw.forst.tools.katlib/get-random-element.html', 'searchKey':'getRandomElement'},
{'name': 'fun <K1, K2, V> Map<K1, Map<K2, V>>.getSecondLevelValues(): Set<V>', 'description':'pw.forst.tools.katlib.getSecondLevelValues', 'location':'katlib/pw.forst.tools.katlib/get-second-level-values.html', 'searchKey':'getSecondLevelValues'},
{'name': 'fun <K1, K2, V, M : MutableCollection<V>> Map<K1, Map<K2, V>>.getSecondLevelValuesTo(destination: M): M', 'description':'pw.forst.tools.katlib.getSecondLevelValuesTo', 'location':'katlib/pw.forst.tools.katlib/get-second-level-values-to.html', 'searchKey':'getSecondLevelValuesTo'},
{'name': 'fun <K1, K2, K3, V> Map<K1, Map<K2, Map<K3, V>>>.getThirdLevelValues(): Set<V>', 'description':'pw.forst.tools.katlib.getThirdLevelValues', 'location':'katlib/pw.forst.tools.katlib/get-third-level-values.html', 'searchKey':'getThirdLevelValues'},
{'name': 'fun <K1, K2, K3, V, M : MutableCollection<V>> Map<K1, Map<K2, Map<K3, V>>>.getThirdLevelValuesTo(destination: M): M', 'description':'pw.forst.tools.katlib.getThirdLevelValuesTo', 'location':'katlib/pw.forst.tools.katlib/get-third-level-values-to.html', 'searchKey':'getThirdLevelValuesTo'},
{'name': 'fun LocalDate.getWeekOfYear(locale: Locale): Int', 'description':'pw.forst.tools.katlib.getWeekOfYear', 'location':'katlib/pw.forst.tools.katlib/get-week-of-year.html', 'searchKey':'getWeekOfYear'},
{'name': 'fun <T> Map<T, Double>.getWeightedRandom(rand: Random): T', 'description':'pw.forst.tools.katlib.getWeightedRandom', 'location':'katlib/pw.forst.tools.katlib/get-weighted-random.html', 'searchKey':'getWeightedRandom'},
{'name': 'fun <T> Iterable<Iterable<T>?>.intersect(): Set<T>', 'description':'pw.forst.tools.katlib.intersect', 'location':'katlib/pw.forst.tools.katlib/intersect.html', 'searchKey':'intersect'},
{'name': 'fun <T : Comparable<T>> ClosedRange<T>.intersects(other: ClosedRange<T>): Boolean', 'description':'pw.forst.tools.katlib.intersects', 'location':'katlib/pw.forst.tools.katlib/intersects.html', 'searchKey':'intersects'},
{'name': 'fun isURL(candidateUrl: String): Boolean', 'description':'pw.forst.tools.katlib.isURL', 'location':'katlib/pw.forst.tools.katlib/is-u-r-l.html', 'searchKey':'isURL'},
{'name': 'fun isUUID(candidateUUID: String): Boolean', 'description':'pw.forst.tools.katlib.isUUID', 'location':'katlib/pw.forst.tools.katlib/is-u-u-i-d.html', 'searchKey':'isUUID'},
{'name': 'inline fun <TItem> Iterable<TItem>.itemsToString(itemsType: String, separator: String, itemLength: Int, totalLength: Int, itemToString: (TItem) -> String): String', 'description':'pw.forst.tools.katlib.itemsToString', 'location':'katlib/pw.forst.tools.katlib/items-to-string.html', 'searchKey':'itemsToString'},
{'name': 'fun jacksonMapper(): ObjectMapper', 'description':'pw.forst.tools.katlib.jacksonMapper', 'location':'katlib/pw.forst.tools.katlib/jackson-mapper.html', 'searchKey':'jacksonMapper'},
{'name': 'inline fun <K, V1, V2, VR> Map<K, V1>.join(other: Map<K, V2>, join: (V1?, V2?) -> VR): Map<K, VR>', 'description':'pw.forst.tools.katlib.join', 'location':'katlib/pw.forst.tools.katlib/join.html', 'searchKey':'join'},
{'name': 'inline fun <K, V1, V2, VR, M : MutableMap<K, VR>> Map<K, V1>.joinTo(destination: M, other: Map<K, V2>, join: (V1?, V2?) -> VR): M', 'description':'pw.forst.tools.katlib.joinTo', 'location':'katlib/pw.forst.tools.katlib/join-to.html', 'searchKey':'joinTo'},
{'name': 'inline fun <T : Any> kClass(): KClass<T>', 'description':'pw.forst.tools.katlib.kClass', 'location':'katlib/pw.forst.tools.katlib/k-class.html', 'searchKey':'kClass'},
{'name': 'inline fun <T, NT, V> Pair<T, V>.letLeft(block: (T) -> NT): Pair<NT, V>', 'description':'pw.forst.tools.katlib.letLeft', 'location':'katlib/pw.forst.tools.katlib/let-left.html', 'searchKey':'letLeft'},
{'name': 'inline fun <T, V, NT, NV> Pair<T, V>.letPair(leftBlock: (T) -> NT, rightBlock: (V) -> NV): Pair<NT, NV>', 'description':'pw.forst.tools.katlib.letPair', 'location':'katlib/pw.forst.tools.katlib/let-pair.html', 'searchKey':'letPair'},
{'name': 'inline fun <T, V, NV> Pair<T, V>.letRight(block: (V) -> NV): Pair<T, NV>', 'description':'pw.forst.tools.katlib.letRight', 'location':'katlib/pw.forst.tools.katlib/let-right.html', 'searchKey':'letRight'},
{'name': 'inline fun <T, NT, V> Pair<Iterable<T>, V>.mapLeft(block: (T) -> NT): Pair<Iterable<NT>, V>', 'description':'pw.forst.tools.katlib.mapLeft', 'location':'katlib/pw.forst.tools.katlib/map-left.html', 'searchKey':'mapLeft'},
{'name': 'inline fun <T, V, NT, NV> Pair<Iterable<T>, Iterable<V>>.mapPair(leftBlock: (T) -> NT, rightBlock: (V) -> NV): Pair<Iterable<NT>, Iterable<NV>>', 'description':'pw.forst.tools.katlib.mapPair', 'location':'katlib/pw.forst.tools.katlib/map-pair.html', 'searchKey':'mapPair'},
{'name': 'inline fun <T, V, NV> Pair<T, Iterable<V>>.mapRight(block: (V) -> NV): Pair<T, Iterable<NV>>', 'description':'pw.forst.tools.katlib.mapRight', 'location':'katlib/pw.forst.tools.katlib/map-right.html', 'searchKey':'mapRight'},
{'name': 'inline fun <T, R> Iterable<T>.mapToSet(transform: (T) -> R): Set<R>', 'description':'pw.forst.tools.katlib.mapToSet', 'location':'katlib/pw.forst.tools.katlib/map-to-set.html', 'searchKey':'mapToSet'},
{'name': 'fun <E> SortedSet<E>.max(): E?', 'description':'pw.forst.tools.katlib.max', 'location':'katlib/pw.forst.tools.katlib/max.html', 'searchKey':'max'},
{'name': 'inline fun <T, R : Comparable<R>> Iterable<T>.maxValueBy(selector: (T) -> R): R?', 'description':'pw.forst.tools.katlib.maxValueBy', 'location':'katlib/pw.forst.tools.katlib/max-value-by.html', 'searchKey':'maxValueBy'},
{'name': 'fun <K, V : Any> Iterable<Map<K, V>>.merge(): Map<K, List<V>>', 'description':'pw.forst.tools.katlib.merge', 'location':'katlib/pw.forst.tools.katlib/merge.html', 'searchKey':'merge'},
{'name': 'inline fun <K, V> Map<K, V>.mergeReduce(other: Map<K, V>, reduce: (V, V) -> V): Map<K, V>', 'description':'pw.forst.tools.katlib.mergeReduce', 'location':'katlib/pw.forst.tools.katlib/merge-reduce.html', 'searchKey':'mergeReduce'},
{'name': 'inline fun <K, V, M : MutableMap<K, V>> Map<K, V>.mergeReduceTo(destination: M, other: Map<K, V>, reduce: (V, V) -> V): M', 'description':'pw.forst.tools.katlib.mergeReduceTo', 'location':'katlib/pw.forst.tools.katlib/merge-reduce-to.html', 'searchKey':'mergeReduceTo'},
{'name': 'fun <E> SortedSet<E>.min(): E?', 'description':'pw.forst.tools.katlib.min', 'location':'katlib/pw.forst.tools.katlib/min.html', 'searchKey':'min'},
{'name': 'inline fun <T, R : Comparable<R>> Iterable<T>.minValueBy(selector: (T) -> R): R?', 'description':'pw.forst.tools.katlib.minValueBy', 'location':'katlib/pw.forst.tools.katlib/min-value-by.html', 'searchKey':'minValueBy'},
{'name': 'fun <T> Optional<T>.orNull(): T?', 'description':'pw.forst.tools.katlib.orNull', 'location':'katlib/pw.forst.tools.katlib/or-null.html', 'searchKey':'orNull'},
{'name': 'fun prettyPrintJson(json: String): String', 'description':'pw.forst.tools.katlib.prettyPrintJson', 'location':'katlib/pw.forst.tools.katlib/pretty-print-json.html', 'searchKey':'prettyPrintJson'},
{'name': 'fun <A : Any, B : Any> Pair<A?, B?>.propagateNull(): Pair<A, B>?', 'description':'pw.forst.tools.katlib.propagateNull', 'location':'katlib/pw.forst.tools.katlib/propagate-null.html', 'searchKey':'propagateNull'},
{'name': 'inline fun <T : Any> T.propertiesFromResources(resourcesPath: String): Properties?', 'description':'pw.forst.tools.katlib.propertiesFromResources', 'location':'katlib/pw.forst.tools.katlib/properties-from-resources.html', 'searchKey':'propertiesFromResources'},
{'name': 'inline fun <T, R> Iterable<T>.reduction(initial: R, operation: (R, T) -> R): List<R>', 'description':'pw.forst.tools.katlib.reduction', 'location':'katlib/pw.forst.tools.katlib/reduction.html', 'searchKey':'reduction'},
{'name': 'fun String.restrictLengthWithEllipsis(maxLength: Int, ellipsis: String): String', 'description':'pw.forst.tools.katlib.restrictLengthWithEllipsis', 'location':'katlib/pw.forst.tools.katlib/restrict-length-with-ellipsis.html', 'searchKey':'restrictLengthWithEllipsis'},
{'name': 'inline fun <T, R> Iterable<T>.setDifferenceBy(other: Iterable<T>, selector: (T) -> R): List<T>', 'description':'pw.forst.tools.katlib.setDifferenceBy', 'location':'katlib/pw.forst.tools.katlib/set-difference-by.html', 'searchKey':'setDifferenceBy'},
{'name': 'fun LocalDate.setWeekOfYearMonday(week: Int, locale: Locale): LocalDate', 'description':'pw.forst.tools.katlib.setWeekOfYearMonday', 'location':'katlib/pw.forst.tools.katlib/set-week-of-year-monday.html', 'searchKey':'setWeekOfYearMonday'},
{'name': 'fun <T, V> Iterable<Pair<T, V>>.splitPairCollection(): Pair<List<T>, List<V>>', 'description':'pw.forst.tools.katlib.splitPairCollection', 'location':'katlib/pw.forst.tools.katlib/split-pair-collection.html', 'searchKey':'splitPairCollection'},
{'name': 'fun String.startsWithLetter(): Boolean', 'description':'pw.forst.tools.katlib.startsWithLetter', 'location':'katlib/pw.forst.tools.katlib/starts-with-letter.html', 'searchKey':'startsWithLetter'},
{'name': 'fun Iterable<List<Int>>.sumByIndexes(): List<Int>', 'description':'pw.forst.tools.katlib.sumByIndexes', 'location':'katlib/pw.forst.tools.katlib/sum-by-indexes.html', 'searchKey':'sumByIndexes'},
{'name': 'fun Iterable<List<Double>>.sumDoublesByIndexes(): List<Double>', 'description':'pw.forst.tools.katlib.sumDoublesByIndexes', 'location':'katlib/pw.forst.tools.katlib/sum-doubles-by-indexes.html', 'searchKey':'sumDoublesByIndexes'},
{'name': 'fun Date.toLocalDate(zoneId: ZoneId): LocalDate', 'description':'pw.forst.tools.katlib.toLocalDate', 'location':'katlib/pw.forst.tools.katlib/to-local-date.html', 'searchKey':'toLocalDate'},
{'name': 'fun Any.toLongString(description: String, brackets: String, className: String?): String', 'description':'pw.forst.tools.katlib.toLongString', 'location':'katlib/pw.forst.tools.katlib/to-long-string.html', 'searchKey':'toLongString'},
{'name': 'fun <T> Iterable<T>.toNavigableSet(comparator: Comparator<In T>): NavigableSet<T>', 'description':'pw.forst.tools.katlib.toNavigableSet', 'location':'katlib/pw.forst.tools.katlib/to-navigable-set.html', 'searchKey':'toNavigableSet'},
{'name': 'fun Any?.toShortString(): String', 'description':'pw.forst.tools.katlib.toShortString', 'location':'katlib/pw.forst.tools.katlib/to-short-string.html', 'searchKey':'toShortString'},
{'name': 'fun Date.toUtcLocalDate(): LocalDate', 'description':'pw.forst.tools.katlib.toUtcLocalDate', 'location':'katlib/pw.forst.tools.katlib/to-utc-local-date.html', 'searchKey':'toUtcLocalDate'},
{'name': 'fun ByteArray.toUuidFlipped(): UUID', 'description':'pw.forst.tools.katlib.toUuidFlipped', 'location':'katlib/pw.forst.tools.katlib/to-uuid-flipped.html', 'searchKey':'toUuidFlipped'},
{'name': 'fun <T> Iterable<Iterable<T>?>.union(): Set<T>', 'description':'pw.forst.tools.katlib.union', 'location':'katlib/pw.forst.tools.katlib/union.html', 'searchKey':'union'},
{'name': 'inline fun Boolean.whenFalse(block: () -> Unit): Boolean', 'description':'pw.forst.tools.katlib.whenFalse', 'location':'katlib/pw.forst.tools.katlib/when-false.html', 'searchKey':'whenFalse'},
{'name': 'inline fun <T> T.whenNull(block: () -> Unit): T', 'description':'pw.forst.tools.katlib.whenNull', 'location':'katlib/pw.forst.tools.katlib/when-null.html', 'searchKey':'whenNull'},
{'name': 'inline fun Boolean.whenTrue(block: () -> Unit): Boolean', 'description':'pw.forst.tools.katlib.whenTrue', 'location':'katlib/pw.forst.tools.katlib/when-true.html', 'searchKey':'whenTrue'},
{'name': 'infix fun <T : Any> T.with(other: T): List<T>', 'description':'pw.forst.tools.katlib.with', 'location':'katlib/pw.forst.tools.katlib/with.html', 'searchKey':'with'}]
