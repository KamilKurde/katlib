var pages = [{"name":"object InstantTimeProvider : TimeProvider<Instant> ","description":"pw.forst.tools.katlib.InstantTimeProvider","location":"katlib/pw.forst.tools.katlib/-instant-time-provider/index.html","searchKeys":["InstantTimeProvider","object InstantTimeProvider : TimeProvider<Instant> "]},{"name":"open override fun now(): Instant","description":"pw.forst.tools.katlib.InstantTimeProvider.now","location":"katlib/pw.forst.tools.katlib/-instant-time-provider/now.html","searchKeys":["now","open override fun now(): Instant"]},{"name":"abstract fun now(): T","description":"pw.forst.tools.katlib.TimeProvider.now","location":"katlib/pw.forst.tools.katlib/-time-provider/now.html","searchKeys":["now","abstract fun now(): T"]},{"name":"interface TimeProvider<T : Temporal>","description":"pw.forst.tools.katlib.TimeProvider","location":"katlib/pw.forst.tools.katlib/-time-provider/index.html","searchKeys":["TimeProvider","interface TimeProvider<T : Temporal>"]},{"name":"fun <T : Any> T.asList(): List<T>","description":"pw.forst.tools.katlib.asList","location":"katlib/pw.forst.tools.katlib/as-list.html","searchKeys":["asList","fun <T : Any> T.asList(): List<T>"]},{"name":"fun <T : Any> createJson(value: T): String","description":"pw.forst.tools.katlib.createJson","location":"katlib/pw.forst.tools.katlib/create-json.html","searchKeys":["createJson","fun <T : Any> createJson(value: T): String"]},{"name":"fun <T : Any> createJsonBytes(value: T): ByteArray","description":"pw.forst.tools.katlib.createJsonBytes","location":"katlib/pw.forst.tools.katlib/create-json-bytes.html","searchKeys":["createJsonBytes","fun <T : Any> createJsonBytes(value: T): ByteArray"]},{"name":"fun <T : Any> createPrettyJson(value: T): String","description":"pw.forst.tools.katlib.createPrettyJson","location":"katlib/pw.forst.tools.katlib/create-pretty-json.html","searchKeys":["createPrettyJson","fun <T : Any> createPrettyJson(value: T): String"]},{"name":"inline fun <T, R> Iterable<T>.dominantValueBy(crossinline selector: (T) -> R): R?","description":"pw.forst.tools.katlib.dominantValueBy","location":"katlib/pw.forst.tools.katlib/dominant-value-by.html","searchKeys":["dominantValueBy","inline fun <T, R> Iterable<T>.dominantValueBy(crossinline selector: (T) -> R): R?"]},{"name":"fun durationInMilli(a: Instant, b: Instant): Long","description":"pw.forst.tools.katlib.durationInMilli","location":"katlib/pw.forst.tools.katlib/duration-in-milli.html","searchKeys":["durationInMilli","fun durationInMilli(a: Instant, b: Instant): Long"]},{"name":"fun Instant.durationToInMilli(other: Instant): Long","description":"pw.forst.tools.katlib.durationToInMilli","location":"katlib/pw.forst.tools.katlib/duration-to-in-milli.html","searchKeys":["durationToInMilli","fun Instant.durationToInMilli(other: Instant): Long"]},{"name":"inline fun <T : Any, R : Any> Iterable<T?>.filterNotNullBy(selector: (T) -> R?): List<T>","description":"pw.forst.tools.katlib.filterNotNullBy","location":"katlib/pw.forst.tools.katlib/filter-not-null-by.html","searchKeys":["filterNotNullBy","inline fun <T : Any, R : Any> Iterable<T?>.filterNotNullBy(selector: (T) -> R?): List<T>"]},{"name":"inline fun <T, R> Iterable<T>.flatMapIndexedNotNull(transform: (index: Int, T) -> Iterable<R>?): List<R>","description":"pw.forst.tools.katlib.flatMapIndexedNotNull","location":"katlib/pw.forst.tools.katlib/flat-map-indexed-not-null.html","searchKeys":["flatMapIndexedNotNull","inline fun <T, R> Iterable<T>.flatMapIndexedNotNull(transform: (index: Int, T) -> Iterable<R>?): List<R>"]},{"name":"inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>?): C","description":"pw.forst.tools.katlib.flatMapIndexedTo","location":"katlib/pw.forst.tools.katlib/flat-map-indexed-to.html","searchKeys":["flatMapIndexedTo","inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>?): C"]},{"name":"inline fun <T, R> Iterable<T>.flatMapToSet(transform: (T) -> Iterable<R>): Set<R>","description":"pw.forst.tools.katlib.flatMapToSet","location":"katlib/pw.forst.tools.katlib/flat-map-to-set.html","searchKeys":["flatMapToSet","inline fun <T, R> Iterable<T>.flatMapToSet(transform: (T) -> Iterable<R>): Set<R>"]},{"name":"fun <K, V : Any> Iterable<Map<K, List<V>>>.flatMerge(): Map<K, List<V>>","description":"pw.forst.tools.katlib.flatMerge","location":"katlib/pw.forst.tools.katlib/flat-merge.html","searchKeys":["flatMerge","fun <K, V : Any> Iterable<Map<K, List<V>>>.flatMerge(): Map<K, List<V>>"]},{"name":"fun <A, B, C> Iterable<Triple<A, B, C>>.flattenToLists(): Triple<List<A>, List<B>, List<C>>","description":"pw.forst.tools.katlib.flattenToLists","location":"katlib/pw.forst.tools.katlib/flatten-to-lists.html","searchKeys":["flattenToLists","fun <A, B, C> Iterable<Triple<A, B, C>>.flattenToLists(): Triple<List<A>, List<B>, List<C>>"]},{"name":"inline fun <S, T : S> Iterable<T>.foldValidated(validationFunction: (S, T) -> Boolean): Boolean","description":"pw.forst.tools.katlib.foldValidated","location":"katlib/pw.forst.tools.katlib/fold-validated.html","searchKeys":["foldValidated","inline fun <S, T : S> Iterable<T>.foldValidated(validationFunction: (S, T) -> Boolean): Boolean"]},{"name":"inline fun <T : Any> Iterable<T?>.forEachNotNull(action: (T) -> Unit)","description":"pw.forst.tools.katlib.forEachNotNull","location":"katlib/pw.forst.tools.katlib/for-each-not-null.html","searchKeys":["forEachNotNull","inline fun <T : Any> Iterable<T?>.forEachNotNull(action: (T) -> Unit)"]},{"name":"fun LocalDate.getDateRangeTo(to: LocalDate): List<LocalDate>","description":"pw.forst.tools.katlib.getDateRangeTo","location":"katlib/pw.forst.tools.katlib/get-date-range-to.html","searchKeys":["getDateRangeTo","fun LocalDate.getDateRangeTo(to: LocalDate): List<LocalDate>"]},{"name":"fun LocalDate.getDateRangeToAsStream(to: LocalDate): Stream<LocalDate>","description":"pw.forst.tools.katlib.getDateRangeToAsStream","location":"katlib/pw.forst.tools.katlib/get-date-range-to-as-stream.html","searchKeys":["getDateRangeToAsStream","fun LocalDate.getDateRangeToAsStream(to: LocalDate): Stream<LocalDate>"]},{"name":"fun LocalDate.getDayDifference(to: LocalDate): Int","description":"pw.forst.tools.katlib.getDayDifference","location":"katlib/pw.forst.tools.katlib/get-day-difference.html","searchKeys":["getDayDifference","fun LocalDate.getDayDifference(to: LocalDate): Int"]},{"name":"fun LocalDate.getDaysInInterval(to: LocalDate): Int","description":"pw.forst.tools.katlib.getDaysInInterval","location":"katlib/pw.forst.tools.katlib/get-days-in-interval.html","searchKeys":["getDaysInInterval","fun LocalDate.getDaysInInterval(to: LocalDate): Int"]},{"name":"fun getEnv(variableName: String): String?","description":"pw.forst.tools.katlib.getEnv","location":"katlib/pw.forst.tools.katlib/get-env.html","searchKeys":["getEnv","fun getEnv(variableName: String): String?"]},{"name":"fun LocalDate.getInvertedDateRangeToAsStream(to: LocalDate): Stream<LocalDate>","description":"pw.forst.tools.katlib.getInvertedDateRangeToAsStream","location":"katlib/pw.forst.tools.katlib/get-inverted-date-range-to-as-stream.html","searchKeys":["getInvertedDateRangeToAsStream","fun LocalDate.getInvertedDateRangeToAsStream(to: LocalDate): Stream<LocalDate>"]},{"name":"fun <T> Map<T, Double>.getKeysInWeightedRandomOrder(normalizer: Double, rand: Random): List<T>","description":"pw.forst.tools.katlib.getKeysInWeightedRandomOrder","location":"katlib/pw.forst.tools.katlib/get-keys-in-weighted-random-order.html","searchKeys":["getKeysInWeightedRandomOrder","fun <T> Map<T, Double>.getKeysInWeightedRandomOrder(normalizer: Double, rand: Random): List<T>"]},{"name":"fun <E> Iterable<E>.getRandomElement(rand: Random): E","description":"pw.forst.tools.katlib.getRandomElement","location":"katlib/pw.forst.tools.katlib/get-random-element.html","searchKeys":["getRandomElement","fun <E> Iterable<E>.getRandomElement(rand: Random): E"]},{"name":"fun <K1, K2, V> Map<K1, Map<K2, V>>.getSecondLevelValues(): Set<V>","description":"pw.forst.tools.katlib.getSecondLevelValues","location":"katlib/pw.forst.tools.katlib/get-second-level-values.html","searchKeys":["getSecondLevelValues","fun <K1, K2, V> Map<K1, Map<K2, V>>.getSecondLevelValues(): Set<V>"]},{"name":"fun <K1, K2, V, M : MutableCollection<V>> Map<K1, Map<K2, V>>.getSecondLevelValuesTo(destination: M): M","description":"pw.forst.tools.katlib.getSecondLevelValuesTo","location":"katlib/pw.forst.tools.katlib/get-second-level-values-to.html","searchKeys":["getSecondLevelValuesTo","fun <K1, K2, V, M : MutableCollection<V>> Map<K1, Map<K2, V>>.getSecondLevelValuesTo(destination: M): M"]},{"name":"fun <K1, K2, K3, V> Map<K1, Map<K2, Map<K3, V>>>.getThirdLevelValues(): Set<V>","description":"pw.forst.tools.katlib.getThirdLevelValues","location":"katlib/pw.forst.tools.katlib/get-third-level-values.html","searchKeys":["getThirdLevelValues","fun <K1, K2, K3, V> Map<K1, Map<K2, Map<K3, V>>>.getThirdLevelValues(): Set<V>"]},{"name":"fun <K1, K2, K3, V, M : MutableCollection<V>> Map<K1, Map<K2, Map<K3, V>>>.getThirdLevelValuesTo(destination: M): M","description":"pw.forst.tools.katlib.getThirdLevelValuesTo","location":"katlib/pw.forst.tools.katlib/get-third-level-values-to.html","searchKeys":["getThirdLevelValuesTo","fun <K1, K2, K3, V, M : MutableCollection<V>> Map<K1, Map<K2, Map<K3, V>>>.getThirdLevelValuesTo(destination: M): M"]},{"name":"fun LocalDate.getWeekOfYear(locale: Locale = Locale.GERMANY): Int","description":"pw.forst.tools.katlib.getWeekOfYear","location":"katlib/pw.forst.tools.katlib/get-week-of-year.html","searchKeys":["getWeekOfYear","fun LocalDate.getWeekOfYear(locale: Locale = Locale.GERMANY): Int"]},{"name":"fun <T> Map<T, Double>.getWeightedRandom(rand: Random): T","description":"pw.forst.tools.katlib.getWeightedRandom","location":"katlib/pw.forst.tools.katlib/get-weighted-random.html","searchKeys":["getWeightedRandom","fun <T> Map<T, Double>.getWeightedRandom(rand: Random): T"]},{"name":"fun <T> Iterable<Iterable<T>?>.intersect(): Set<T>","description":"pw.forst.tools.katlib.intersect","location":"katlib/pw.forst.tools.katlib/intersect.html","searchKeys":["intersect","fun <T> Iterable<Iterable<T>?>.intersect(): Set<T>"]},{"name":"fun <T : Comparable<T>> ClosedRange<T>.intersects(other: ClosedRange<T>): Boolean","description":"pw.forst.tools.katlib.intersects","location":"katlib/pw.forst.tools.katlib/intersects.html","searchKeys":["intersects","fun <T : Comparable<T>> ClosedRange<T>.intersects(other: ClosedRange<T>): Boolean"]},{"name":"fun String.isEmail(): Boolean","description":"pw.forst.tools.katlib.isEmail","location":"katlib/pw.forst.tools.katlib/is-email.html","searchKeys":["isEmail","fun String.isEmail(): Boolean"]},{"name":"fun <T> Iterable<T>.isEmpty(): Boolean","description":"pw.forst.tools.katlib.isEmpty","location":"katlib/pw.forst.tools.katlib/is-empty.html","searchKeys":["isEmpty","fun <T> Iterable<T>.isEmpty(): Boolean"]},{"name":"fun isURL(candidateUrl: String): Boolean","description":"pw.forst.tools.katlib.isURL","location":"katlib/pw.forst.tools.katlib/is-u-r-l.html","searchKeys":["isURL","fun isURL(candidateUrl: String): Boolean"]},{"name":"fun isUUID(candidateUUID: String): Boolean","description":"pw.forst.tools.katlib.isUUID","location":"katlib/pw.forst.tools.katlib/is-u-u-i-d.html","searchKeys":["isUUID","fun isUUID(candidateUUID: String): Boolean"]},{"name":"inline fun <TItem> Iterable<TItem>.itemsToString(itemsType: String = \"items\", separator: String = \", \", itemLength: Int = 30, totalLength: Int = 200, itemToString: (TItem) -> String = { item -> item.toShortString() }): String","description":"pw.forst.tools.katlib.itemsToString","location":"katlib/pw.forst.tools.katlib/items-to-string.html","searchKeys":["itemsToString","inline fun <TItem> Iterable<TItem>.itemsToString(itemsType: String = \"items\", separator: String = \", \", itemLength: Int = 30, totalLength: Int = 200, itemToString: (TItem) -> String = { item -> item.toShortString() }): String"]},{"name":"fun jacksonMapper(): ObjectMapper","description":"pw.forst.tools.katlib.jacksonMapper","location":"katlib/pw.forst.tools.katlib/jackson-mapper.html","searchKeys":["jacksonMapper","fun jacksonMapper(): ObjectMapper"]},{"name":"inline fun <K, V1, V2, VR> Map<K, V1>.join(other: Map<K, V2>, join: (V1?, V2?) -> VR): Map<K, VR>","description":"pw.forst.tools.katlib.join","location":"katlib/pw.forst.tools.katlib/join.html","searchKeys":["join","inline fun <K, V1, V2, VR> Map<K, V1>.join(other: Map<K, V2>, join: (V1?, V2?) -> VR): Map<K, VR>"]},{"name":"inline fun <K, V1, V2, VR, M : MutableMap<K, VR>> Map<K, V1>.joinTo(destination: M, other: Map<K, V2>, join: (V1?, V2?) -> VR): M","description":"pw.forst.tools.katlib.joinTo","location":"katlib/pw.forst.tools.katlib/join-to.html","searchKeys":["joinTo","inline fun <K, V1, V2, VR, M : MutableMap<K, VR>> Map<K, V1>.joinTo(destination: M, other: Map<K, V2>, join: (V1?, V2?) -> VR): M"]},{"name":"inline fun <T : Any> kClass(): KClass<T>","description":"pw.forst.tools.katlib.kClass","location":"katlib/pw.forst.tools.katlib/k-class.html","searchKeys":["kClass","inline fun <T : Any> kClass(): KClass<T>"]},{"name":"fun <T> Iterable<Iterable<T>>.lazyCartesianProduct(): Sequence<List<T>>","description":"pw.forst.tools.katlib.lazyCartesianProduct","location":"katlib/pw.forst.tools.katlib/lazy-cartesian-product.html","searchKeys":["lazyCartesianProduct","fun <T> Iterable<Iterable<T>>.lazyCartesianProduct(): Sequence<List<T>>"]},{"name":"inline fun <T, NT, V> Pair<T, V>.letLeft(block: (T) -> NT): Pair<NT, V>","description":"pw.forst.tools.katlib.letLeft","location":"katlib/pw.forst.tools.katlib/let-left.html","searchKeys":["letLeft","inline fun <T, NT, V> Pair<T, V>.letLeft(block: (T) -> NT): Pair<NT, V>"]},{"name":"inline fun <T, V, NT, NV> Pair<T, V>.letPair(leftBlock: (T) -> NT, rightBlock: (V) -> NV): Pair<NT, NV>","description":"pw.forst.tools.katlib.letPair","location":"katlib/pw.forst.tools.katlib/let-pair.html","searchKeys":["letPair","inline fun <T, V, NT, NV> Pair<T, V>.letPair(leftBlock: (T) -> NT, rightBlock: (V) -> NV): Pair<NT, NV>"]},{"name":"inline fun <T, V, NV> Pair<T, V>.letRight(block: (V) -> NV): Pair<T, NV>","description":"pw.forst.tools.katlib.letRight","location":"katlib/pw.forst.tools.katlib/let-right.html","searchKeys":["letRight","inline fun <T, V, NV> Pair<T, V>.letRight(block: (V) -> NV): Pair<T, NV>"]},{"name":"inline fun <T, NT, V> Pair<Iterable<T>, V>.mapLeft(block: (T) -> NT): Pair<Iterable<NT>, V>","description":"pw.forst.tools.katlib.mapLeft","location":"katlib/pw.forst.tools.katlib/map-left.html","searchKeys":["mapLeft","inline fun <T, NT, V> Pair<Iterable<T>, V>.mapLeft(block: (T) -> NT): Pair<Iterable<NT>, V>"]},{"name":"inline fun <T, V, NT, NV> Pair<Iterable<T>, Iterable<V>>.mapPair(leftBlock: (T) -> NT, rightBlock: (V) -> NV): Pair<Iterable<NT>, Iterable<NV>>","description":"pw.forst.tools.katlib.mapPair","location":"katlib/pw.forst.tools.katlib/map-pair.html","searchKeys":["mapPair","inline fun <T, V, NT, NV> Pair<Iterable<T>, Iterable<V>>.mapPair(leftBlock: (T) -> NT, rightBlock: (V) -> NV): Pair<Iterable<NT>, Iterable<NV>>"]},{"name":"inline fun <T, V, NV> Pair<T, Iterable<V>>.mapRight(block: (V) -> NV): Pair<T, Iterable<NV>>","description":"pw.forst.tools.katlib.mapRight","location":"katlib/pw.forst.tools.katlib/map-right.html","searchKeys":["mapRight","inline fun <T, V, NV> Pair<T, Iterable<V>>.mapRight(block: (V) -> NV): Pair<T, Iterable<NV>>"]},{"name":"inline fun <T, R> Iterable<T>.mapToSet(transform: (T) -> R): Set<R>","description":"pw.forst.tools.katlib.mapToSet","location":"katlib/pw.forst.tools.katlib/map-to-set.html","searchKeys":["mapToSet","inline fun <T, R> Iterable<T>.mapToSet(transform: (T) -> R): Set<R>"]},{"name":"fun <E> SortedSet<E>.max(): E?","description":"pw.forst.tools.katlib.max","location":"katlib/pw.forst.tools.katlib/max.html","searchKeys":["max","fun <E> SortedSet<E>.max(): E?"]},{"name":"inline fun <T, R : Comparable<R>> Iterable<T>.maxValueBy(selector: (T) -> R): R?","description":"pw.forst.tools.katlib.maxValueBy","location":"katlib/pw.forst.tools.katlib/max-value-by.html","searchKeys":["maxValueBy","inline fun <T, R : Comparable<R>> Iterable<T>.maxValueBy(selector: (T) -> R): R?"]},{"name":"fun <K, V : Any> Iterable<Map<K, V>>.merge(): Map<K, List<V>>","description":"pw.forst.tools.katlib.merge","location":"katlib/pw.forst.tools.katlib/merge.html","searchKeys":["merge","fun <K, V : Any> Iterable<Map<K, V>>.merge(): Map<K, List<V>>"]},{"name":"inline fun <K, V> Map<K, V>.mergeReduce(other: Map<K, V>, reduce: (V, V) -> V = { a, _ -> a }): Map<K, V>","description":"pw.forst.tools.katlib.mergeReduce","location":"katlib/pw.forst.tools.katlib/merge-reduce.html","searchKeys":["mergeReduce","inline fun <K, V> Map<K, V>.mergeReduce(other: Map<K, V>, reduce: (V, V) -> V = { a, _ -> a }): Map<K, V>"]},{"name":"inline fun <K, V, M : MutableMap<K, V>> Map<K, V>.mergeReduceTo(destination: M, other: Map<K, V>, reduce: (V, V) -> V = { a, _ -> a }): M","description":"pw.forst.tools.katlib.mergeReduceTo","location":"katlib/pw.forst.tools.katlib/merge-reduce-to.html","searchKeys":["mergeReduceTo","inline fun <K, V, M : MutableMap<K, V>> Map<K, V>.mergeReduceTo(destination: M, other: Map<K, V>, reduce: (V, V) -> V = { a, _ -> a }): M"]},{"name":"fun <E> SortedSet<E>.min(): E?","description":"pw.forst.tools.katlib.min","location":"katlib/pw.forst.tools.katlib/min.html","searchKeys":["min","fun <E> SortedSet<E>.min(): E?"]},{"name":"inline fun <T, R : Comparable<R>> Iterable<T>.minValueBy(selector: (T) -> R): R?","description":"pw.forst.tools.katlib.minValueBy","location":"katlib/pw.forst.tools.katlib/min-value-by.html","searchKeys":["minValueBy","inline fun <T, R : Comparable<R>> Iterable<T>.minValueBy(selector: (T) -> R): R?"]},{"name":"val newLine: String","description":"pw.forst.tools.katlib.newLine","location":"katlib/pw.forst.tools.katlib/new-line.html","searchKeys":["newLine","val newLine: String"]},{"name":"fun <T> Optional<T>.orNull(): T?","description":"pw.forst.tools.katlib.orNull","location":"katlib/pw.forst.tools.katlib/or-null.html","searchKeys":["orNull","fun <T> Optional<T>.orNull(): T?"]},{"name":"fun prettyPrintJson(json: String): String","description":"pw.forst.tools.katlib.prettyPrintJson","location":"katlib/pw.forst.tools.katlib/pretty-print-json.html","searchKeys":["prettyPrintJson","fun prettyPrintJson(json: String): String"]},{"name":"fun <A : Any, B : Any> Pair<A?, B?>.propagateNull(): Pair<A, B>?","description":"pw.forst.tools.katlib.propagateNull","location":"katlib/pw.forst.tools.katlib/propagate-null.html","searchKeys":["propagateNull","fun <A : Any, B : Any> Pair<A?, B?>.propagateNull(): Pair<A, B>?"]},{"name":"inline fun <T : Any> T.propertiesFromResources(resourcesPath: String): Properties?","description":"pw.forst.tools.katlib.propertiesFromResources","location":"katlib/pw.forst.tools.katlib/properties-from-resources.html","searchKeys":["propertiesFromResources","inline fun <T : Any> T.propertiesFromResources(resourcesPath: String): Properties?"]},{"name":"inline fun <T, R> Iterable<T>.reduction(initial: R, operation: (R, T) -> R): List<R>","description":"pw.forst.tools.katlib.reduction","location":"katlib/pw.forst.tools.katlib/reduction.html","searchKeys":["reduction","inline fun <T, R> Iterable<T>.reduction(initial: R, operation: (R, T) -> R): List<R>"]},{"name":"fun String.restrictLengthWithEllipsis(maxLength: Int, ellipsis: String = \"…\"): String","description":"pw.forst.tools.katlib.restrictLengthWithEllipsis","location":"katlib/pw.forst.tools.katlib/restrict-length-with-ellipsis.html","searchKeys":["restrictLengthWithEllipsis","fun String.restrictLengthWithEllipsis(maxLength: Int, ellipsis: String = \"…\"): String"]},{"name":"inline fun <T, R> Iterable<T>.setDifferenceBy(other: Iterable<T>, selector: (T) -> R): List<T>","description":"pw.forst.tools.katlib.setDifferenceBy","location":"katlib/pw.forst.tools.katlib/set-difference-by.html","searchKeys":["setDifferenceBy","inline fun <T, R> Iterable<T>.setDifferenceBy(other: Iterable<T>, selector: (T) -> R): List<T>"]},{"name":"fun LocalDate.setWeekOfYearMonday(week: Int, locale: Locale = Locale.GERMANY): LocalDate","description":"pw.forst.tools.katlib.setWeekOfYearMonday","location":"katlib/pw.forst.tools.katlib/set-week-of-year-monday.html","searchKeys":["setWeekOfYearMonday","fun LocalDate.setWeekOfYearMonday(week: Int, locale: Locale = Locale.GERMANY): LocalDate"]},{"name":"fun <T, V> Iterable<Pair<T, V>>.splitPairCollection(): Pair<List<T>, List<V>>","description":"pw.forst.tools.katlib.splitPairCollection","location":"katlib/pw.forst.tools.katlib/split-pair-collection.html","searchKeys":["splitPairCollection","fun <T, V> Iterable<Pair<T, V>>.splitPairCollection(): Pair<List<T>, List<V>>"]},{"name":"fun String.startsWithLetter(): Boolean","description":"pw.forst.tools.katlib.startsWithLetter","location":"katlib/pw.forst.tools.katlib/starts-with-letter.html","searchKeys":["startsWithLetter","fun String.startsWithLetter(): Boolean"]},{"name":"inline fun <T> Iterable<T>.sumByFloat(selector: (T) -> Float): Float","description":"pw.forst.tools.katlib.sumByFloat","location":"katlib/pw.forst.tools.katlib/sum-by-float.html","searchKeys":["sumByFloat","inline fun <T> Iterable<T>.sumByFloat(selector: (T) -> Float): Float"]},{"name":"fun Iterable<List<Int>>.sumByIndexes(): List<Int>","description":"pw.forst.tools.katlib.sumByIndexes","location":"katlib/pw.forst.tools.katlib/sum-by-indexes.html","searchKeys":["sumByIndexes","fun Iterable<List<Int>>.sumByIndexes(): List<Int>"]},{"name":"fun Iterable<List<Double>>.sumDoublesByIndexes(): List<Double>","description":"pw.forst.tools.katlib.sumDoublesByIndexes","location":"katlib/pw.forst.tools.katlib/sum-doubles-by-indexes.html","searchKeys":["sumDoublesByIndexes","fun Iterable<List<Double>>.sumDoublesByIndexes(): List<Double>"]},{"name":"fun Date.toLocalDate(zoneId: ZoneId): LocalDate","description":"pw.forst.tools.katlib.toLocalDate","location":"katlib/pw.forst.tools.katlib/to-local-date.html","searchKeys":["toLocalDate","fun Date.toLocalDate(zoneId: ZoneId): LocalDate"]},{"name":"fun Any.toLongString(description: String, brackets: String = \"()\", className: String? = null): String","description":"pw.forst.tools.katlib.toLongString","location":"katlib/pw.forst.tools.katlib/to-long-string.html","searchKeys":["toLongString","fun Any.toLongString(description: String, brackets: String = \"()\", className: String? = null): String"]},{"name":"fun <T> Iterable<T>.toNavigableSet(comparator: Comparator<in T>): NavigableSet<T>","description":"pw.forst.tools.katlib.toNavigableSet","location":"katlib/pw.forst.tools.katlib/to-navigable-set.html","searchKeys":["toNavigableSet","fun <T> Iterable<T>.toNavigableSet(comparator: Comparator<in T>): NavigableSet<T>"]},{"name":"fun Any?.toShortString(): String","description":"pw.forst.tools.katlib.toShortString","location":"katlib/pw.forst.tools.katlib/to-short-string.html","searchKeys":["toShortString","fun Any?.toShortString(): String"]},{"name":"fun Date.toUtcLocalDate(): LocalDate","description":"pw.forst.tools.katlib.toUtcLocalDate","location":"katlib/pw.forst.tools.katlib/to-utc-local-date.html","searchKeys":["toUtcLocalDate","fun Date.toUtcLocalDate(): LocalDate"]},{"name":"fun ByteArray.toUuidFlipped(): UUID","description":"pw.forst.tools.katlib.toUuidFlipped","location":"katlib/pw.forst.tools.katlib/to-uuid-flipped.html","searchKeys":["toUuidFlipped","fun ByteArray.toUuidFlipped(): UUID"]},{"name":"fun <T> Iterable<Iterable<T>?>.union(): Set<T>","description":"pw.forst.tools.katlib.union","location":"katlib/pw.forst.tools.katlib/union.html","searchKeys":["union","fun <T> Iterable<Iterable<T>?>.union(): Set<T>"]},{"name":"inline fun Boolean.whenFalse(block: () -> Unit): Boolean","description":"pw.forst.tools.katlib.whenFalse","location":"katlib/pw.forst.tools.katlib/when-false.html","searchKeys":["whenFalse","inline fun Boolean.whenFalse(block: () -> Unit): Boolean"]},{"name":"inline fun <T> T.whenNull(block: () -> Unit): T","description":"pw.forst.tools.katlib.whenNull","location":"katlib/pw.forst.tools.katlib/when-null.html","searchKeys":["whenNull","inline fun <T> T.whenNull(block: () -> Unit): T"]},{"name":"inline fun Boolean.whenTrue(block: () -> Unit): Boolean","description":"pw.forst.tools.katlib.whenTrue","location":"katlib/pw.forst.tools.katlib/when-true.html","searchKeys":["whenTrue","inline fun Boolean.whenTrue(block: () -> Unit): Boolean"]},{"name":"infix fun <T : Any> T.with(other: T): List<T>","description":"pw.forst.tools.katlib.with","location":"katlib/pw.forst.tools.katlib/with.html","searchKeys":["with","infix fun <T : Any> T.with(other: T): List<T>"]},{"name":"inline fun <A, B, C, V> Iterable<A>.zip(b: Iterable<B>, c: Iterable<C>, transform: (A, B, C) -> V): List<V>","description":"pw.forst.tools.katlib.zip","location":"katlib/pw.forst.tools.katlib/zip.html","searchKeys":["zip","inline fun <A, B, C, V> Iterable<A>.zip(b: Iterable<B>, c: Iterable<C>, transform: (A, B, C) -> V): List<V>"]}]
