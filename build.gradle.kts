import io.gitlab.arturbosch.detekt.Detekt
import org.gradle.jvm.tasks.Jar
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import java.net.URI

plugins {
    `maven-publish`
    jacoco // for test coverage reports

    kotlin("jvm") version Versions.kotlin

    id("io.gitlab.arturbosch.detekt") version Versions.detekt
}

group = "ai.blindspot"
version = "0.0.3-SNAPSHOT"

repositories {
    jcenter()
}

detekt {
    parallel = true
    input = files(subprojects.map { it.projectDir }, "buildSrc")
    config = files(rootDir.resolve("detekt-config.yml"))
}

dependencies {
    implementation(Libs.kotlinStdlib) // kotlin std
    implementation(Libs.kotlinLogging) // logging DSL

    // testing
    testImplementation(TestLibs.kotlinTest) // kotlin idiomatic testing
    testImplementation(TestLibs.kotlinTestJunit5) // kotlin.test wrapper for Junit5
    testImplementation(TestLibs.mockk) // mock framework
    testImplementation(TestLibs.logbackClassic) // logging framework for the tests
    testImplementation(TestLibs.junitApi) // junit testing framework
    testImplementation(TestLibs.junitParams) // generated parameters for tests

    testRuntime(TestLibs.junitEngine) // testing runtime
}

/**
 * Folder with stored jacoco test coverage results
 */
val jacocoReports = "$buildDir${File.separator}jacoco${File.separator}reports"

tasks {
    test {
        @Suppress("UnstableApiUsage") // Required for running tests, however the api is still incubating
        useJUnitPlatform()
    }

    // when check is executed, detekt and test coverage verification must be run as well
    check {
        dependsOn(detekt, jacocoTestCoverageVerification) // fails when the code coverage is below value specified in Props.codeCoverageMinimum
    }

    // generate test reports for the Sonarqube and in the human-readable form
    jacocoTestReport {
        dependsOn(test)

        @Suppress("UnstableApiUsage") // Required for test coverage reports, however the api is still incubating
        reports {
            csv.isEnabled = false
            xml.isEnabled = true
            xml.destination = file("$jacocoReports.xml")
            html.isEnabled = true
            html.destination = file(jacocoReports)
        }

        classDirectories.setFrom(
            sourceSets.main.get().output.asFileTree.matching {
                exclude(IgnoredFiles.jacoco)
            }
        )
    }

    // set up verification for test coverage
    jacocoTestCoverageVerification {
        dependsOn(jacocoTestReport)

        violationRules {
            // note that the test coverage for jacoco is computed in different manner than in Intellij -> Idea shows 100% and Jacoco 39%
            // this is because Jacoco does not count to test coverage cases when the function is called from another function
            // and counts only the cases when the function is called from the test
            // TODO for the future - complete all tests to have 0.9 test coverage
            rule { limit { minimum = Props.codeCoverageMinimum.getOrDefault("0.3").toBigDecimal() } }
        }

        classDirectories.setFrom(
            sourceSets.main.get().output.asFileTree.matching {
                exclude(IgnoredFiles.jacoco)
            }
        )
    }

    withType<KotlinCompile> {
        kotlinOptions.jvmTarget = "1.8"
    }

    withType<Detekt> {
        exclude(IgnoredFiles.detekt) // exclude autogenerated packages
    }
}

// deployment configuration - deploy with sources and documentation
val sourcesJar by tasks.creating(Jar::class) {
    archiveClassifier.set("sources")
    from(sourceSets.main.get().allSource)
}

val javadocJar by tasks.creating(Jar::class) {
    archiveClassifier.set("javadoc")
    from(tasks.javadoc)
}

publishing {
    publications {
        create<MavenPublication>("default") {
            from(components["java"])
            artifact(sourcesJar)
            artifact(javadocJar)
        }
    }
    repositories {
        maven {
            val releasesRepoUrl = URI(Props.nexusUrlReleases.get())
            val snapshotsRepoUrl = URI(Props.nexusUrlSnapshots.get())

            url = if (version.toString().endsWith("SNAPSHOT")) snapshotsRepoUrl else releasesRepoUrl

            credentials {
                username = Props.nexusUser.get()
                password = Props.nexusPassword.get()
            }
        }
    }
}
