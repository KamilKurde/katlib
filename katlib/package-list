$dokka.format:html-v1
$dokka.linkExtension:html
$dokka.location:dev.forst.katlib////PointingToDeclaration/katlib/dev.forst.katlib/index.html
$dokka.location:dev.forst.katlib//applyIf/TypeParam(bounds=[kotlin.Any])#kotlin.Boolean#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Unit]/PointingToDeclaration/katlib/dev.forst.katlib/apply-if.html
$dokka.location:dev.forst.katlib//applyIf/TypeParam(bounds=[kotlin.Any])#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Boolean]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Unit]/PointingToDeclaration/katlib/dev.forst.katlib/apply-if.html
$dokka.location:dev.forst.katlib//applyIfNotNull/TypeParam(bounds=[kotlin.Any])#TypeParam(bounds=[kotlin.Any])?#kotlin.Function2[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any]),kotlin.Unit]/PointingToDeclaration/katlib/dev.forst.katlib/apply-if-not-null.html
$dokka.location:dev.forst.katlib//asList/TypeParam(bounds=[kotlin.Any])#/PointingToDeclaration/katlib/dev.forst.katlib/as-list.html
$dokka.location:dev.forst.katlib//assoc/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/katlib/dev.forst.katlib/assoc.html
$dokka.location:dev.forst.katlib//assoc/kotlin.collections.Iterable[kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/katlib/dev.forst.katlib/assoc.html
$dokka.location:dev.forst.katlib//assoc/kotlin.sequences.Sequence[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/katlib/dev.forst.katlib/assoc.html
$dokka.location:dev.forst.katlib//assoc/kotlin.sequences.Sequence[kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/katlib/dev.forst.katlib/assoc.html
$dokka.location:dev.forst.katlib//assocBy/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-by.html
$dokka.location:dev.forst.katlib//assocBy/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-by.html
$dokka.location:dev.forst.katlib//assocBy/kotlin.sequences.Sequence[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-by.html
$dokka.location:dev.forst.katlib//assocBy/kotlin.sequences.Sequence[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-by.html
$dokka.location:dev.forst.katlib//assocByTo/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-by-to.html
$dokka.location:dev.forst.katlib//assocByTo/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-by-to.html
$dokka.location:dev.forst.katlib//assocByTo/kotlin.sequences.Sequence[TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-by-to.html
$dokka.location:dev.forst.katlib//assocByTo/kotlin.sequences.Sequence[TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-by-to.html
$dokka.location:dev.forst.katlib//assocTo/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-to.html
$dokka.location:dev.forst.katlib//assocTo/kotlin.collections.Iterable[kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])/PointingToDeclaration/katlib/dev.forst.katlib/assoc-to.html
$dokka.location:dev.forst.katlib//assocTo/kotlin.sequences.Sequence[TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-to.html
$dokka.location:dev.forst.katlib//assocTo/kotlin.sequences.Sequence[kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])/PointingToDeclaration/katlib/dev.forst.katlib/assoc-to.html
$dokka.location:dev.forst.katlib//assocWith/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-with.html
$dokka.location:dev.forst.katlib//assocWith/kotlin.sequences.Sequence[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-with.html
$dokka.location:dev.forst.katlib//assocWithTo/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-with-to.html
$dokka.location:dev.forst.katlib//assocWithTo/kotlin.sequences.Sequence[TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/assoc-with-to.html
$dokka.location:dev.forst.katlib//buildArray/#kotlin.Function1[kotlin.collections.MutableList[TypeParam(bounds=[kotlin.Any?])],kotlin.Unit]/PointingToDeclaration/katlib/dev.forst.katlib/build-array.html
$dokka.location:dev.forst.katlib//cartesianProduct/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/cartesian-product.html
$dokka.location:dev.forst.katlib//cartesianProduct/kotlin.collections.Iterable[kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/katlib/dev.forst.katlib/cartesian-product.html
$dokka.location:dev.forst.katlib//computeMd5/#kotlin.ByteArray/PointingToDeclaration/katlib/dev.forst.katlib/compute-md5.html
$dokka.location:dev.forst.katlib//createJson/#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/katlib/dev.forst.katlib/create-json.html
$dokka.location:dev.forst.katlib//createJsonBytes/#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/katlib/dev.forst.katlib/create-json-bytes.html
$dokka.location:dev.forst.katlib//createPrettyJson/#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/katlib/dev.forst.katlib/create-pretty-json.html
$dokka.location:dev.forst.katlib//dominantValueBy/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/dominant-value-by.html
$dokka.location:dev.forst.katlib//durationInMilli/#java.time.Instant#java.time.Instant/PointingToDeclaration/katlib/dev.forst.katlib/duration-in-milli.html
$dokka.location:dev.forst.katlib//durationToInMilli/java.time.Instant#java.time.Instant/PointingToDeclaration/katlib/dev.forst.katlib/duration-to-in-milli.html
$dokka.location:dev.forst.katlib//equalsIgnoreCase/kotlin.String?#kotlin.String?/PointingToDeclaration/katlib/dev.forst.katlib/equals-ignore-case.html
$dokka.location:dev.forst.katlib//filter/kotlin.Array[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/katlib/dev.forst.katlib/filter.html
$dokka.location:dev.forst.katlib//filterIndexed/kotlin.Array[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function2[kotlin.Int,TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/katlib/dev.forst.katlib/filter-indexed.html
$dokka.location:dev.forst.katlib//filterIsInstance/kotlin.Array[*]#/PointingToDeclaration/katlib/dev.forst.katlib/filter-is-instance.html
$dokka.location:dev.forst.katlib//filterNot/kotlin.Array[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/katlib/dev.forst.katlib/filter-not.html
$dokka.location:dev.forst.katlib//filterNotNull/kotlin.Array[TypeParam(bounds=[kotlin.Any])?]#/PointingToDeclaration/katlib/dev.forst.katlib/filter-not-null.html
$dokka.location:dev.forst.katlib//filterNotNullBy/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any])?]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])?]/PointingToDeclaration/katlib/dev.forst.katlib/filter-not-null-by.html
$dokka.location:dev.forst.katlib//flatMapIndexedNotNull/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function2[kotlin.Int,TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]?]/PointingToDeclaration/katlib/dev.forst.katlib/flat-map-indexed-not-null.html
$dokka.location:dev.forst.katlib//flatMapIndexedTo/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.collections.MutableCollection[TypeParam(bounds=[kotlin.Any?])]])#kotlin.Function2[kotlin.Int,TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]?]/PointingToDeclaration/katlib/dev.forst.katlib/flat-map-indexed-to.html
$dokka.location:dev.forst.katlib//flatMapToSet/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/katlib/dev.forst.katlib/flat-map-to-set.html
$dokka.location:dev.forst.katlib//flatMerge/kotlin.collections.Iterable[kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.List[TypeParam(bounds=[kotlin.Any])]]]#/PointingToDeclaration/katlib/dev.forst.katlib/flat-merge.html
$dokka.location:dev.forst.katlib//flattenToLists/kotlin.collections.Iterable[kotlin.Triple[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/katlib/dev.forst.katlib/flatten-to-lists.html
$dokka.location:dev.forst.katlib//foldValidated/kotlin.collections.Iterable[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any?])])]#kotlin.Function2[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[TypeParam(bounds=[kotlin.Any?])]),kotlin.Boolean]/PointingToDeclaration/katlib/dev.forst.katlib/fold-validated.html
$dokka.location:dev.forst.katlib//forEachNotNull/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any])?]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Unit]/PointingToDeclaration/katlib/dev.forst.katlib/for-each-not-null.html
$dokka.location:dev.forst.katlib//getDateRangeTo/java.time.LocalDate#java.time.LocalDate/PointingToDeclaration/katlib/dev.forst.katlib/get-date-range-to.html
$dokka.location:dev.forst.katlib//getDateRangeToAsStream/java.time.LocalDate#java.time.LocalDate/PointingToDeclaration/katlib/dev.forst.katlib/get-date-range-to-as-stream.html
$dokka.location:dev.forst.katlib//getDayDifference/java.time.LocalDate#java.time.LocalDate/PointingToDeclaration/katlib/dev.forst.katlib/get-day-difference.html
$dokka.location:dev.forst.katlib//getDaysInInterval/java.time.LocalDate#java.time.LocalDate/PointingToDeclaration/katlib/dev.forst.katlib/get-days-in-interval.html
$dokka.location:dev.forst.katlib//getEnv/#kotlin.String#kotlin.Function0[kotlin.String]/PointingToDeclaration/katlib/dev.forst.katlib/get-env.html
$dokka.location:dev.forst.katlib//getEnv/#kotlin.String/PointingToDeclaration/katlib/dev.forst.katlib/get-env.html
$dokka.location:dev.forst.katlib//getInvertedDateRangeToAsStream/java.time.LocalDate#java.time.LocalDate/PointingToDeclaration/katlib/dev.forst.katlib/get-inverted-date-range-to-as-stream.html
$dokka.location:dev.forst.katlib//getKeysInWeightedRandomOrder/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.Double]#kotlin.Double#kotlin.random.Random/PointingToDeclaration/katlib/dev.forst.katlib/get-keys-in-weighted-random-order.html
$dokka.location:dev.forst.katlib//getRandomElement/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.random.Random/PointingToDeclaration/katlib/dev.forst.katlib/get-random-element.html
$dokka.location:dev.forst.katlib//getSecondLevelValues/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/katlib/dev.forst.katlib/get-second-level-values.html
$dokka.location:dev.forst.katlib//getSecondLevelValuesTo/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]#TypeParam(bounds=[kotlin.collections.MutableCollection[TypeParam(bounds=[kotlin.Any?])]])/PointingToDeclaration/katlib/dev.forst.katlib/get-second-level-values-to.html
$dokka.location:dev.forst.katlib//getThirdLevelValues/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]]#/PointingToDeclaration/katlib/dev.forst.katlib/get-third-level-values.html
$dokka.location:dev.forst.katlib//getThirdLevelValuesTo/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]]#TypeParam(bounds=[kotlin.collections.MutableCollection[TypeParam(bounds=[kotlin.Any?])]])/PointingToDeclaration/katlib/dev.forst.katlib/get-third-level-values-to.html
$dokka.location:dev.forst.katlib//getWeekOfYear/java.time.LocalDate#java.util.Locale/PointingToDeclaration/katlib/dev.forst.katlib/get-week-of-year.html
$dokka.location:dev.forst.katlib//getWeightedRandom/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.Double]#kotlin.random.Random/PointingToDeclaration/katlib/dev.forst.katlib/get-weighted-random.html
$dokka.location:dev.forst.katlib//hashWithSha256/#java.io.File/PointingToDeclaration/katlib/dev.forst.katlib/hash-with-sha256.html
$dokka.location:dev.forst.katlib//hashWithSha256/#kotlin.ByteArray/PointingToDeclaration/katlib/dev.forst.katlib/hash-with-sha256.html
$dokka.location:dev.forst.katlib//hashWithSha256/#kotlin.String/PointingToDeclaration/katlib/dev.forst.katlib/hash-with-sha256.html
$dokka.location:dev.forst.katlib//intersect/kotlin.collections.Iterable[kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]?]#/PointingToDeclaration/katlib/dev.forst.katlib/intersect.html
$dokka.location:dev.forst.katlib//intersects/kotlin.ranges.ClosedRange[TypeParam(bounds=[kotlin.Comparable[^]])]#kotlin.ranges.ClosedRange[TypeParam(bounds=[kotlin.Comparable[^]])]/PointingToDeclaration/katlib/dev.forst.katlib/intersects.html
$dokka.location:dev.forst.katlib//isEmail/kotlin.String#/PointingToDeclaration/katlib/dev.forst.katlib/is-email.html
$dokka.location:dev.forst.katlib//isEmpty/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#/PointingToDeclaration/katlib/dev.forst.katlib/is-empty.html
$dokka.location:dev.forst.katlib//isURL/#kotlin.String/PointingToDeclaration/katlib/dev.forst.katlib/is-u-r-l.html
$dokka.location:dev.forst.katlib//isUUID/#kotlin.String/PointingToDeclaration/katlib/dev.forst.katlib/is-u-u-i-d.html
$dokka.location:dev.forst.katlib//isUrl/#kotlin.String/PointingToDeclaration/katlib/dev.forst.katlib/is-url.html
$dokka.location:dev.forst.katlib//isUrl/kotlin.String#/PointingToDeclaration/katlib/dev.forst.katlib/is-url.html
$dokka.location:dev.forst.katlib//isUuid/#kotlin.String/PointingToDeclaration/katlib/dev.forst.katlib/is-uuid.html
$dokka.location:dev.forst.katlib//isUuid/kotlin.String#/PointingToDeclaration/katlib/dev.forst.katlib/is-uuid.html
$dokka.location:dev.forst.katlib//itemsToString/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.String#kotlin.String#kotlin.Int#kotlin.Int#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.String]/PointingToDeclaration/katlib/dev.forst.katlib/items-to-string.html
$dokka.location:dev.forst.katlib//jacksonMapper/#/PointingToDeclaration/katlib/dev.forst.katlib/jackson-mapper.html
$dokka.location:dev.forst.katlib//jacksonMapper/#kotlin.Function1[com.fasterxml.jackson.databind.ObjectMapper,kotlin.Unit]/PointingToDeclaration/katlib/dev.forst.katlib/jackson-mapper.html
$dokka.location:dev.forst.katlib//join/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function2[TypeParam(bounds=[kotlin.Any?])?,TypeParam(bounds=[kotlin.Any?])?,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/join.html
$dokka.location:dev.forst.katlib//joinTo/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])#kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function2[TypeParam(bounds=[kotlin.Any?])?,TypeParam(bounds=[kotlin.Any?])?,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/join-to.html
$dokka.location:dev.forst.katlib//kClass/#/PointingToDeclaration/katlib/dev.forst.katlib/k-class.html
$dokka.location:dev.forst.katlib//lazyCartesianProduct/kotlin.collections.Iterable[kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/katlib/dev.forst.katlib/lazy-cartesian-product.html
$dokka.location:dev.forst.katlib//letLeft/kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/let-left.html
$dokka.location:dev.forst.katlib//letPair/kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/let-pair.html
$dokka.location:dev.forst.katlib//letRight/kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/let-right.html
$dokka.location:dev.forst.katlib//map/kotlin.Array[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/map.html
$dokka.location:dev.forst.katlib//mapIndexed/kotlin.Array[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function2[kotlin.Int,TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/map-indexed.html
$dokka.location:dev.forst.katlib//mapLeft/kotlin.Pair[kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])],TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/map-left.html
$dokka.location:dev.forst.katlib//mapPair/kotlin.Pair[kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])],kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/map-pair.html
$dokka.location:dev.forst.katlib//mapRight/kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/map-right.html
$dokka.location:dev.forst.katlib//mapToSet/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/map-to-set.html
$dokka.location:dev.forst.katlib//max/java.util.SortedSet[TypeParam(bounds=[kotlin.Any?])]#/PointingToDeclaration/katlib/dev.forst.katlib/max.html
$dokka.location:dev.forst.katlib//maxValueBy/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Comparable[^]])]/PointingToDeclaration/katlib/dev.forst.katlib/max-value-by.html
$dokka.location:dev.forst.katlib//md5/kotlin.ByteArray#/PointingToDeclaration/katlib/dev.forst.katlib/md5.html
$dokka.location:dev.forst.katlib//merge/kotlin.collections.Iterable[kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any])]]#/PointingToDeclaration/katlib/dev.forst.katlib/merge.html
$dokka.location:dev.forst.katlib//mergeReduce/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function2[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/merge-reduce.html
$dokka.location:dev.forst.katlib//mergeReduceTo/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])#kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function2[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/merge-reduce-to.html
$dokka.location:dev.forst.katlib//min/java.util.SortedSet[TypeParam(bounds=[kotlin.Any?])]#/PointingToDeclaration/katlib/dev.forst.katlib/min.html
$dokka.location:dev.forst.katlib//minValueBy/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Comparable[^]])]/PointingToDeclaration/katlib/dev.forst.katlib/min-value-by.html
$dokka.location:dev.forst.katlib//minus/kotlin.Array[TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/katlib/dev.forst.katlib/minus.html
$dokka.location:dev.forst.katlib//minus/kotlin.Array[TypeParam(bounds=[kotlin.Any?])]#kotlin.Array[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/minus.html
$dokka.location:dev.forst.katlib//newLine/#/PointingToDeclaration/katlib/dev.forst.katlib/new-line.html
$dokka.location:dev.forst.katlib//orNull/java.util.Optional[TypeParam(bounds=[kotlin.Any?])]#/PointingToDeclaration/katlib/dev.forst.katlib/or-null.html
$dokka.location:dev.forst.katlib//parseJson/#kotlin.ByteArray#kotlin.Boolean/PointingToDeclaration/katlib/dev.forst.katlib/parse-json.html
$dokka.location:dev.forst.katlib//parseJson/#kotlin.String#kotlin.Boolean/PointingToDeclaration/katlib/dev.forst.katlib/parse-json.html
$dokka.location:dev.forst.katlib//prettyPrintJson/#kotlin.String/PointingToDeclaration/katlib/dev.forst.katlib/pretty-print-json.html
$dokka.location:dev.forst.katlib//prompt/#kotlin.String#kotlin.Function1[java.lang.Exception,kotlin.String?]#kotlin.Function1[kotlin.String,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/prompt.html
$dokka.location:dev.forst.katlib//propagateNull/kotlin.Pair[TypeParam(bounds=[kotlin.Any])?,TypeParam(bounds=[kotlin.Any])?]#/PointingToDeclaration/katlib/dev.forst.katlib/propagate-null.html
$dokka.location:dev.forst.katlib//propertiesFromResources/TypeParam(bounds=[kotlin.Any])#kotlin.String/PointingToDeclaration/katlib/dev.forst.katlib/properties-from-resources.html
$dokka.location:dev.forst.katlib//random/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.random.Random/PointingToDeclaration/katlib/dev.forst.katlib/random.html
$dokka.location:dev.forst.katlib//reduction/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.Any?])#kotlin.Function2[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/reduction.html
$dokka.location:dev.forst.katlib//restrictLengthWithEllipsis/kotlin.String#kotlin.Int#kotlin.String/PointingToDeclaration/katlib/dev.forst.katlib/restrict-length-with-ellipsis.html
$dokka.location:dev.forst.katlib//setDifferenceBy/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/set-difference-by.html
$dokka.location:dev.forst.katlib//setWeekOfYearMonday/java.time.LocalDate#kotlin.Int#java.util.Locale/PointingToDeclaration/katlib/dev.forst.katlib/set-week-of-year-monday.html
$dokka.location:dev.forst.katlib//sha256/kotlin.ByteArray#/PointingToDeclaration/katlib/dev.forst.katlib/sha256.html
$dokka.location:dev.forst.katlib//singleOrEmpty/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#/PointingToDeclaration/katlib/dev.forst.katlib/single-or-empty.html
$dokka.location:dev.forst.katlib//singleOrEmpty/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/katlib/dev.forst.katlib/single-or-empty.html
$dokka.location:dev.forst.katlib//splitPairCollection/kotlin.collections.Iterable[kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/katlib/dev.forst.katlib/split-pair-collection.html
$dokka.location:dev.forst.katlib//stacktraceToString/kotlin.Throwable#/PointingToDeclaration/katlib/dev.forst.katlib/stacktrace-to-string.html
$dokka.location:dev.forst.katlib//startsWithLetter/kotlin.String#/PointingToDeclaration/katlib/dev.forst.katlib/starts-with-letter.html
$dokka.location:dev.forst.katlib//sumByFloat/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Float]/PointingToDeclaration/katlib/dev.forst.katlib/sum-by-float.html
$dokka.location:dev.forst.katlib//sumByIndexes/kotlin.collections.Iterable[kotlin.collections.List[kotlin.Int]]#/PointingToDeclaration/katlib/dev.forst.katlib/sum-by-indexes.html
$dokka.location:dev.forst.katlib//sumByLong/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Long]/PointingToDeclaration/katlib/dev.forst.katlib/sum-by-long.html
$dokka.location:dev.forst.katlib//sumByLong/kotlin.sequences.Sequence[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Long]/PointingToDeclaration/katlib/dev.forst.katlib/sum-by-long.html
$dokka.location:dev.forst.katlib//sumDoublesByIndexes/kotlin.collections.Iterable[kotlin.collections.List[kotlin.Double]]#/PointingToDeclaration/katlib/dev.forst.katlib/sum-doubles-by-indexes.html
$dokka.location:dev.forst.katlib//swapKeys/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/katlib/dev.forst.katlib/swap-keys.html
$dokka.location:dev.forst.katlib//swapKeys/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]]#kotlin.Function3[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),kotlin.Triple[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/katlib/dev.forst.katlib/swap-keys.html
$dokka.location:dev.forst.katlib//swapKeysTo/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])]])#kotlin.Function0[TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])]/PointingToDeclaration/katlib/dev.forst.katlib/swap-keys-to.html
$dokka.location:dev.forst.katlib//swapKeysTo/kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),kotlin.collections.Map[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])]])]])#kotlin.Function0[TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])]])]#kotlin.Function0[TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])]#kotlin.Function3[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),kotlin.Triple[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/katlib/dev.forst.katlib/swap-keys-to.html
$dokka.location:dev.forst.katlib//toBase64/kotlin.ByteArray#/PointingToDeclaration/katlib/dev.forst.katlib/to-base64.html
$dokka.location:dev.forst.katlib//toBase64/kotlin.String#/PointingToDeclaration/katlib/dev.forst.katlib/to-base64.html
$dokka.location:dev.forst.katlib//toLocalDate/java.util.Date#java.time.ZoneId/PointingToDeclaration/katlib/dev.forst.katlib/to-local-date.html
$dokka.location:dev.forst.katlib//toLongString/kotlin.Any#kotlin.String#kotlin.String#kotlin.String?/PointingToDeclaration/katlib/dev.forst.katlib/to-long-string.html
$dokka.location:dev.forst.katlib//toNavigableSet/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#java.util.Comparator[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/to-navigable-set.html
$dokka.location:dev.forst.katlib//toShortString/kotlin.Any?#/PointingToDeclaration/katlib/dev.forst.katlib/to-short-string.html
$dokka.location:dev.forst.katlib//toThreeLevelMap/kotlin.collections.Map[kotlin.Triple[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])],TypeParam(bounds=[kotlin.Any?])]#/PointingToDeclaration/katlib/dev.forst.katlib/to-three-level-map.html
$dokka.location:dev.forst.katlib//toThreeLevelMap/kotlin.collections.Map[kotlin.Triple[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])],TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])]])]])#kotlin.Function0[TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])]])]#kotlin.Function0[TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])]/PointingToDeclaration/katlib/dev.forst.katlib/to-three-level-map.html
$dokka.location:dev.forst.katlib//toTwoLevelMap/kotlin.collections.List[kotlin.Pair[kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])],TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/katlib/dev.forst.katlib/to-two-level-map.html
$dokka.location:dev.forst.katlib//toTwoLevelMap/kotlin.collections.List[kotlin.Pair[kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])],TypeParam(bounds=[kotlin.Any?])]]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])]])#kotlin.Function0[TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])]/PointingToDeclaration/katlib/dev.forst.katlib/to-two-level-map.html
$dokka.location:dev.forst.katlib//toTwoLevelMap/kotlin.collections.Map[kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])],TypeParam(bounds=[kotlin.Any?])]#/PointingToDeclaration/katlib/dev.forst.katlib/to-two-level-map.html
$dokka.location:dev.forst.katlib//toTwoLevelMap/kotlin.collections.Map[kotlin.Pair[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])],TypeParam(bounds=[kotlin.Any?])]#TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])]])#kotlin.Function0[TypeParam(bounds=[kotlin.collections.MutableMap[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]])]/PointingToDeclaration/katlib/dev.forst.katlib/to-two-level-map.html
$dokka.location:dev.forst.katlib//toUrl/kotlin.String#/PointingToDeclaration/katlib/dev.forst.katlib/to-url.html
$dokka.location:dev.forst.katlib//toUtcLocalDate/java.util.Date#/PointingToDeclaration/katlib/dev.forst.katlib/to-utc-local-date.html
$dokka.location:dev.forst.katlib//toUuid/kotlin.ByteArray#/PointingToDeclaration/katlib/dev.forst.katlib/to-uuid.html
$dokka.location:dev.forst.katlib//toUuid/kotlin.String#/PointingToDeclaration/katlib/dev.forst.katlib/to-uuid.html
$dokka.location:dev.forst.katlib//toUuidFlipped/kotlin.ByteArray#/PointingToDeclaration/katlib/dev.forst.katlib/to-uuid-flipped.html
$dokka.location:dev.forst.katlib//union/kotlin.collections.Iterable[kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]?]#/PointingToDeclaration/katlib/dev.forst.katlib/union.html
$dokka.location:dev.forst.katlib//validate/TypeParam(bounds=[kotlin.Any?])#kotlin.Boolean#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Unit]/PointingToDeclaration/katlib/dev.forst.katlib/validate.html
$dokka.location:dev.forst.katlib//validate/TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Unit]/PointingToDeclaration/katlib/dev.forst.katlib/validate.html
$dokka.location:dev.forst.katlib//whenFalse/kotlin.Boolean#kotlin.Function0[kotlin.Unit]/PointingToDeclaration/katlib/dev.forst.katlib/when-false.html
$dokka.location:dev.forst.katlib//whenNull/TypeParam(bounds=[kotlin.Any?])#kotlin.Function0[kotlin.Unit]/PointingToDeclaration/katlib/dev.forst.katlib/when-null.html
$dokka.location:dev.forst.katlib//whenTrue/kotlin.Boolean#kotlin.Function0[kotlin.Unit]/PointingToDeclaration/katlib/dev.forst.katlib/when-true.html
$dokka.location:dev.forst.katlib//with/TypeParam(bounds=[kotlin.Any])#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/katlib/dev.forst.katlib/with.html
$dokka.location:dev.forst.katlib//withEach/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Unit]/PointingToDeclaration/katlib/dev.forst.katlib/with-each.html
$dokka.location:dev.forst.katlib//withEachIndexed/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function2[TypeParam(bounds=[kotlin.Any?]),kotlin.Int,kotlin.Unit]/PointingToDeclaration/katlib/dev.forst.katlib/with-each-indexed.html
$dokka.location:dev.forst.katlib//zip/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function3[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/katlib/dev.forst.katlib/zip.html
$dokka.location:dev.forst.katlib/InstantTimeProvider///PointingToDeclaration/katlib/dev.forst.katlib/-instant-time-provider/index.html
$dokka.location:dev.forst.katlib/InstantTimeProvider/now/#/PointingToDeclaration/katlib/dev.forst.katlib/-instant-time-provider/now.html
$dokka.location:dev.forst.katlib/LocalDateTimeProvider///PointingToDeclaration/katlib/dev.forst.katlib/-local-date-time-provider/index.html
$dokka.location:dev.forst.katlib/LocalDateTimeProvider/now/#/PointingToDeclaration/katlib/dev.forst.katlib/-local-date-time-provider/now.html
$dokka.location:dev.forst.katlib/TimeProvider///PointingToDeclaration/katlib/dev.forst.katlib/-time-provider/index.html
$dokka.location:dev.forst.katlib/TimeProvider/now/#/PointingToDeclaration/katlib/dev.forst.katlib/-time-provider/now.html
dev.forst.katlib

